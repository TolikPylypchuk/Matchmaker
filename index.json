{
  "api/Matchmaker.AsyncMatch-1.html": {
    "href": "api/Matchmaker.AsyncMatch-1.html",
    "title": "Class AsyncMatch<TInput> | Matchmaker",
    "summary": "Class AsyncMatch<TInput> Namespace Matchmaker Assembly Matchmaker.dll Represents an asynchronous match statement - a match expression that doesn't yield a value. public sealed class AsyncMatch<TInput> Type Parameters TInput The type of the input value of the expression. Inheritance object AsyncMatch<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, Task>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TType>(Action<TType>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TType>(Action<TType> action) where TType : TInput Parameters action Action<TType> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Action<TType>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TType>(bool fallthrough, Action<TType> action) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. action Action<TType> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Func<TType, Task>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TType>(bool fallthrough, Func<TType, Task> action) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. action Func<TType, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. Case<TType>(Func<TType, Task>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public AsyncMatch<TInput> Case<TType>(Func<TType, Task> action) where TType : TInput Parameters action Func<TType, Task> The action to execute if the match is successful. Returns AsyncMatch<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. ExecuteAsync(TInput) Asynchronously executes the match statement strictly on the specified input. public Task ExecuteAsync(TInput input) Parameters input TInput The input value of the statement. Returns Task Exceptions MatchException The match failed for all cases. ExecuteNonStrictAsync(TInput) Asynchronously executes the match statement non-strictly on the specified input. public Task<bool> ExecuteNonStrictAsync(TInput input) Parameters input TInput The input value of the statement. Returns Task<bool> true, if the match was successful. Otherwise, false. ExecuteWithFallthroughAsync(TInput) Asynchronously executes the match statement on the specified input with fallthrough lazily. public IAsyncEnumerable<object?> ExecuteWithFallthroughAsync(TInput input) Parameters input TInput The input value of the statement. Returns IAsyncEnumerable<object> An enumerable of null objects which enables the execution to be lazy. The number of items in this enumerable equals the number of successful cases. ToFunction() Returns an action which, when called, will match the specified value. public Func<TInput, Task> ToFunction() Returns Func<TInput, Task> An action which, when called, will match the specified value. ToFunctionWithFallthrough() Returns a function which, when called, will match the specified value with fallthrough. public Func<TInput, IAsyncEnumerable<object?>> ToFunctionWithFallthrough() Returns Func<TInput, IAsyncEnumerable<object>> A function which, when called, will match the specified value with fallthrough. ToNonStrictFunction() Returns a function which, when called, will match the specified value non-strictly. public Func<TInput, Task<bool>> ToNonStrictFunction() Returns Func<TInput, Task<bool>> A function which, when called, will match the specified value non-strictly. See Also AsyncMatch<TInput, TOutput> AsyncMatch MatchException"
  },
  "api/Matchmaker.AsyncMatch-2.html": {
    "href": "api/Matchmaker.AsyncMatch-2.html",
    "title": "Class AsyncMatch<TInput, TOutput> | Matchmaker",
    "summary": "Class AsyncMatch<TInput, TOutput> Namespace Matchmaker Assembly Matchmaker.dll Represents an asynchronous match expression. public sealed class AsyncMatch<TInput, TOutput> Type Parameters TInput The type of the input value of the expression. TOutput The type of the output value of the expression. Inheritance object AsyncMatch<TInput, TOutput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task<TOutput>>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<TOutput>>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task<TOutput>>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, Task<TOutput>>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TType>(bool, Func<TType, Task<TOutput>>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, Task<TOutput>> func) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. func Func<TType, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(bool, Func<TType, TOutput>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, TOutput> func) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. func Func<TType, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, Task<TOutput>>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TType>(Func<TType, Task<TOutput>> func) where TType : TInput Parameters func Func<TType, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, TOutput>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public AsyncMatch<TInput, TOutput> Case<TType>(Func<TType, TOutput> func) where TType : TInput Parameters func Func<TType, TOutput> The function to execute if the match is successful. Returns AsyncMatch<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(AsyncPattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. ExecuteAsync(TInput) Asynchronously executes the match expression on the specified input and returns the result. public Task<TOutput> ExecuteAsync(TInput input) Parameters input TInput The input value of the expression. Returns Task<TOutput> The result of the match expression. Exceptions MatchException The match failed for all cases. ExecuteNonStrictAsync(TInput) Asynchronously executes the match expression on the specified input and returns the result. public Task<MatchResult<TOutput>> ExecuteNonStrictAsync(TInput input) Parameters input TInput The input value of the expression. Returns Task<MatchResult<TOutput>> The result of the match expression, or a failed result if no pattern was matched successfully. ExecuteWithFallthroughAsync(TInput) Asynchronously executes the match expression on the specified input with fallthrough and lazily returns the results. public IAsyncEnumerable<TOutput> ExecuteWithFallthroughAsync(TInput input) Parameters input TInput The input value of the expression. Returns IAsyncEnumerable<TOutput> The results of the match expression, empty if no pattern is matched successfully. Remarks This method returns a lazy enumerable - it will check only as many patterns, as are needed to return one result at a time. The enumerable may contain null values. ToFunction() Returns a function which, when called, will match the specified value. public Func<TInput, Task<TOutput>> ToFunction() Returns Func<TInput, Task<TOutput>> A function which, when called, will match the specified value. ToFunctionWithFallthrough() Returns a function which, when called, will match the specified value. public Func<TInput, IAsyncEnumerable<TOutput>> ToFunctionWithFallthrough() Returns Func<TInput, IAsyncEnumerable<TOutput>> A function which, when called, will match the specified value. Remarks This method returns a lazy enumerable - it will check only as many patterns, as are needed to return one result at a time. The enumerable may contain null values. ToNonStrictFunction() Returns a function which, when called, will match the specified value. public Func<TInput, Task<MatchResult<TOutput>>> ToNonStrictFunction() Returns Func<TInput, Task<MatchResult<TOutput>>> A function which, when called, will match the specified value. See Also AsyncMatch<TInput> AsyncMatch MatchException"
  },
  "api/Matchmaker.AsyncMatch.html": {
    "href": "api/Matchmaker.AsyncMatch.html",
    "title": "Class AsyncMatch | Matchmaker",
    "summary": "Class AsyncMatch Namespace Matchmaker Assembly Matchmaker.dll A static class which is used to create asynchronous match expressions. public static class AsyncMatch Inheritance object AsyncMatch Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ClearCache<TInput>() Clears the global cache of static AsyncMatch<TInput> instances. public static void ClearCache<TInput>() Type Parameters TInput The type of the input value. Remarks After calling this method all CreateStatic<TInput>(Action<AsyncMatchBuilder<TInput>>, string, int) calls will recalculate match statements for type TInput. Clearing the cache is thread-safe. ClearCache<TInput, TOutput>() Clears the global cache of static AsyncMatch<TInput, TOutput> instances. public static void ClearCache<TInput, TOutput>() Type Parameters TInput The type of the input value. TOutput The type of the result. Remarks After calling this method all CreateStatic<TInput, TOutput>(Action<AsyncMatchBuilder<TInput, TOutput>>, string, int) calls will recalculate match expressions for types TInput and TOutput. Clearing the cache is thread-safe. CreateStatic<TInput>(Action<AsyncMatchBuilder<TInput>>, string, int) Creates an asynchronous match statement which is then globally cached. public static AsyncMatch<TInput> CreateStatic<TInput>(Action<AsyncMatchBuilder<TInput>> buildAction, string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters buildAction Action<AsyncMatchBuilder<TInput>> The action which builds the match statement. sourceFilePath string The path to the source file in which this method is called. sourceLineNumber int The line in the source file where this method is called. Returns AsyncMatch<TInput> The globally cached match expression. Type Parameters TInput The type of the input value. Remarks The key of the cache is the location of this method's call in the source code. This way, a new match statement object will not be allocated every time pattern matching occurs in the same place more than once. The pattern caching process is thread-safe. Exceptions ArgumentNullException buildAction or sourceFilePath is null. CreateStatic<TInput, TOutput>(Action<AsyncMatchBuilder<TInput, TOutput>>, string, int) Creates an asynchronous match expression which is then globally cached. public static AsyncMatch<TInput, TOutput> CreateStatic<TInput, TOutput>(Action<AsyncMatchBuilder<TInput, TOutput>> buildAction, string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters buildAction Action<AsyncMatchBuilder<TInput, TOutput>> The action which builds the match expression. sourceFilePath string The path to the source file in which this method is called. sourceLineNumber int The line in the source file where this method is called. Returns AsyncMatch<TInput, TOutput> The globally cached match expression. Type Parameters TInput The type of the input value. TOutput The type of the result. Remarks The key of the cache is the location of this method's call in the source code. This way, a new match expression object will not be allocated every time pattern matching occurs in the same place more than once. The pattern caching process is thread-safe. Exceptions ArgumentNullException buildAction or sourceFilePath is null. Create<TInput>() Creates an asynchronous match statement. public static AsyncMatch<TInput> Create<TInput>() Returns AsyncMatch<TInput> A match statement which specifies the patterns to match with and actions which are executed. Type Parameters TInput The type of the input value. Create<TInput>(bool) Creates an asynchronous match statement with the specified default fallthrough behaviour. public static AsyncMatch<TInput> Create<TInput>(bool fallthroughByDefault) Parameters fallthroughByDefault bool The default fallthrough behaviour. Returns AsyncMatch<TInput> A match statement which specifies the patterns to match with and actions which are executed. Type Parameters TInput The type of the input value. Create<TInput, TOutput>() Creates an asynchronous match expression. public static AsyncMatch<TInput, TOutput> Create<TInput, TOutput>() Returns AsyncMatch<TInput, TOutput> A match expression which specifies the patterns to match with and functions which are executed. Type Parameters TInput The type of the input value. TOutput The type of the result. Create<TInput, TOutput>(bool) Creates an asynchronous match expression. public static AsyncMatch<TInput, TOutput> Create<TInput, TOutput>(bool fallthroughByDefault) Parameters fallthroughByDefault bool The default fallthrough behaviour. Returns AsyncMatch<TInput, TOutput> A match expression which specifies the patterns to match with and functions which are executed. Type Parameters TInput The type of the input value. TOutput The type of the result. See Also AsyncMatch<TInput, TOutput> AsyncMatch<TInput> AsyncMatchBuilder<TInput, TOutput> AsyncMatchBuilder<TInput>"
  },
  "api/Matchmaker.AsyncMatchBuilder-1.html": {
    "href": "api/Matchmaker.AsyncMatchBuilder-1.html",
    "title": "Class AsyncMatchBuilder<TInput> | Matchmaker",
    "summary": "Class AsyncMatchBuilder<TInput> Namespace Matchmaker Assembly Matchmaker.dll Represents an asynchronous match statement builder. public sealed class AsyncMatchBuilder<TInput> Type Parameters TInput The type of the input value of the expression. Inheritance object AsyncMatchBuilder<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Action<TMatchResult>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task> action) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Action<TMatchResult>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. action Action<TMatchResult> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Func<TMatchResult, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TType>(Action<TType>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TType>(Action<TType> action) where TType : TInput Parameters action Action<TType> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Action<TType>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TType>(bool fallthrough, Action<TType> action) where TType : TInput Parameters fallthrough bool The fallthrough behavior. action Action<TType> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Func<TType, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TType>(bool fallthrough, Func<TType, Task> action) where TType : TInput Parameters fallthrough bool The fallthrough behavior. action Func<TType, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. Case<TType>(Func<TType, Task>) Add the specified case to the match statement. public AsyncMatchBuilder<TInput> Case<TType>(Func<TType, Task> action) where TType : TInput Parameters action Func<TType, Task> The action to execute if the match is successful. Returns AsyncMatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. Fallthrough(bool) Sets the default fallthrough behavior for the match statement. public AsyncMatchBuilder<TInput> Fallthrough(bool fallthrough) Parameters fallthrough bool The default fallthrough behavior. Returns AsyncMatchBuilder<TInput> The calling builder. See Also AsyncMatch<TInput>"
  },
  "api/Matchmaker.AsyncMatchBuilder-2.html": {
    "href": "api/Matchmaker.AsyncMatchBuilder-2.html",
    "title": "Class AsyncMatchBuilder<TInput, TOutput> | Matchmaker",
    "summary": "Class AsyncMatchBuilder<TInput, TOutput> Namespace Matchmaker Assembly Matchmaker.dll Represents an asynchronous match expression builder. public sealed class AsyncMatchBuilder<TInput, TOutput> Type Parameters TInput The type of the input value of the expression. TOutput The type of the output value of the expression. Inheritance object AsyncMatchBuilder<TInput, TOutput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<TOutput>> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TType>(bool, Func<TType, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, Task<TOutput>> func) where TType : TInput Parameters fallthrough bool The fallthrough behavior. func Func<TType, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(bool, Func<TType, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, TOutput> func) where TType : TInput Parameters fallthrough bool The fallthrough behavior. func Func<TType, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, Task<TOutput>>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TType>(Func<TType, Task<TOutput>> func) where TType : TInput Parameters func Func<TType, Task<TOutput>> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, TOutput>) Add the specified case to the match expression. public AsyncMatchBuilder<TInput, TOutput> Case<TType>(Func<TType, TOutput> func) where TType : TInput Parameters func Func<TType, TOutput> The function to execute if the match is successful. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(AsyncPattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. Fallthrough(bool) Sets the default fallthrough behavior for the match expression. public AsyncMatchBuilder<TInput, TOutput> Fallthrough(bool fallthrough) Parameters fallthrough bool The default fallthrough behavior. Returns AsyncMatchBuilder<TInput, TOutput> The calling builder. See Also AsyncMatch<TInput, TOutput>"
  },
  "api/Matchmaker.Linq.AsyncPatternExtensions.html": {
    "href": "api/Matchmaker.Linq.AsyncPatternExtensions.html",
    "title": "Class AsyncPatternExtensions | Matchmaker",
    "summary": "Class AsyncPatternExtensions Namespace Matchmaker.Linq Assembly Matchmaker.dll A container class for extension methods for IAsyncPattern<TInput, TMatchResult>. public static class AsyncPatternExtensions Inheritance object AsyncPatternExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods And<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IAsyncPattern<T, T> And<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.And) Exceptions ArgumentNullException leftPattern or rightPattern is null. And<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IAsyncPattern<T, T> And<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern, string description) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.And, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>) Returns a pattern which binds (flat-maps) the result of the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Bind<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>> binder) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. binder Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>> The result binding function. Returns IAsyncPattern<TInput, TMatchResult> A pattern which binds (flat-maps) the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or binder is null. Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>, string) Returns a pattern which binds (flat-maps) the result of the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Bind<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>> binder, string description) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. binder Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>> The result binding function. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which binds (flat-maps) the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern, binder or description is null. Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>) Returns a pattern which matches the same as the specified pattern, but caches its results. public static IAsyncPattern<TInput, TMatchResult> Cached<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose results should be cached. Returns IAsyncPattern<TInput, TMatchResult> A pattern which matches the same as the specified pattern, but caches its results. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks The returned pattern's caching process is thread-safe. The cache itself is a simple null-safe hash table. Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, string) Returns a pattern which matches the same as the specified pattern, but caches its results. public static IAsyncPattern<TInput, TMatchResult> Cached<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern, string description) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose results should be cached. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which matches the same as the specified pattern, but caches its results. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks The returned pattern's caching process is thread-safe. The cache itself is a simple null-safe hash table. Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>) Returns a pattern which casts the result of the specified pattern to another type. public static IAsyncPattern<TInput, TMatchResult> Cast<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern) where TMatchResult : TIntermediateResult Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be cast. Returns IAsyncPattern<TInput, TMatchResult> A pattern which casts the result of the specified pattern to another type. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.Type<TIntermediateResult, TMatchResult>()) As such, this pattern fails if the input is null and TMatchResult is a non-nullable value type. Exceptions ArgumentNullException pattern is null. Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, string) Returns a pattern which casts the result of the specified pattern to another type. public static IAsyncPattern<TInput, TMatchResult> Cast<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, string description) where TMatchResult : TIntermediateResult Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be cast. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.Type<TIntermediateResult, TMatchResult>(), description) As such, this pattern fails if the input is null and TMatchResult is a non-nullable value type. Exceptions ArgumentNullException pattern or description is null. Compose<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>, PatternComposition) Returns a pattern which is composed of the two specified patterns. public static IAsyncPattern<T, T> Compose<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern, PatternComposition composition) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. composition PatternComposition The composition which should be applied to the patterns. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. Exceptions ArgumentNullException leftPattern or rightPattern is null. Compose<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>, PatternComposition, string) Returns a pattern which is composed of the two specified patterns. public static IAsyncPattern<T, T> Compose<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern, PatternComposition composition, string description) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. composition PatternComposition The composition which should be applied to the patterns. description string The description of this pattern. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. Exceptions ArgumentNullException leftPattern, rightPattern or description is null. Or<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IAsyncPattern<T, T> Or<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Or) Exceptions ArgumentNullException leftPattern or rightPattern is null. Or<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful when either pattern's result is successful. public static IAsyncPattern<T, T> Or<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern, string description) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful when either pattern's result is successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Or, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>) Returns a pattern which pipes the result of one pattern to the other pattern. public static IAsyncPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> firstPattern, IAsyncPattern<TIntermediateResult, TMatchResult> secondPattern) Parameters firstPattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be piped. secondPattern IAsyncPattern<TIntermediateResult, TMatchResult> The pattern whose input is the first pattern's output. Returns IAsyncPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException firstPattern or secondPattern is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>, string) Returns a pattern which pipes the result of one pattern to the other pattern. public static IAsyncPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> firstPattern, IAsyncPattern<TIntermediateResult, TMatchResult> secondPattern, string description) Parameters firstPattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be piped. secondPattern IAsyncPattern<TIntermediateResult, TMatchResult> The pattern whose input is the first pattern's output. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException firstPattern, secondPattern or description is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>) Returns a pattern which pipes the result of one pattern to the pattern created by the specified matcher function. public static IAsyncPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>> matcher) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be piped. matcher Func<TIntermediateResult, Task<MatchResult<TMatchResult>>> The pattern whose input is the first pattern's output. Returns IAsyncPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the pattern created by the specified matcher function. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following, except it reuses the pattern's description: pattern.Pipe(Pattern.CreatePattern(matcher)) Exceptions ArgumentNullException pattern or matcher is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>, string) Returns a pattern which pipes the result of one pattern to the pattern created by the specified matcher function. public static IAsyncPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>> matcher, string description) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be piped. matcher Func<TIntermediateResult, Task<MatchResult<TMatchResult>>> The pattern whose input is the first pattern's output. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the pattern created by the specified matcher function. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.CreatePattern(matcher), description) Exceptions ArgumentNullException pattern, matcher or description is null. Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) Returns a pattern which maps the result of the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Select<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, TMatchResult> mapper) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. mapper Func<TIntermediateResult, TMatchResult> The result mapping function. Returns IAsyncPattern<TInput, TMatchResult> A pattern which maps the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or mapper is null. Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) Returns a pattern which maps the result of the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Select<TInput, TIntermediateResult, TMatchResult>(this IAsyncPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, TMatchResult> mapper, string description) Parameters pattern IAsyncPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. mapper Func<TIntermediateResult, TMatchResult> The result mapping function. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which maps the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern, mapper or description is null. Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) Returns a pattern which adds a condition to the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, bool> predicate) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, bool> The condition to add. Returns IAsyncPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) Returns a pattern which adds a condition to the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, bool> predicate, string description) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, bool> The condition to add. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>) Returns a pattern which adds a condition to the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<bool>> predicate) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, Task<bool>> The condition to add. Returns IAsyncPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>, string) Returns a pattern which adds a condition to the specified pattern. public static IAsyncPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IAsyncPattern<TInput, TMatchResult> pattern, Func<TMatchResult, Task<bool>> predicate, string description) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, Task<bool>> The condition to add. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Xor<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IAsyncPattern<T, T> Xor<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Xor) Exceptions ArgumentNullException leftPattern or rightPattern is null. Xor<T>(IAsyncPattern<T, T>, IAsyncPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful when only one pattern's result is successful. public static IAsyncPattern<T, T> Xor<T>(this IAsyncPattern<T, T> leftPattern, IAsyncPattern<T, T> rightPattern, string description) Parameters leftPattern IAsyncPattern<T, T> The left pattern to compose. rightPattern IAsyncPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IAsyncPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful when only one pattern's result is successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Xor, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. See Also IAsyncPattern<TInput, TMatchResult>"
  },
  "api/Matchmaker.Linq.MatchExtensions.html": {
    "href": "api/Matchmaker.Linq.MatchExtensions.html",
    "title": "Class MatchExtensions | Matchmaker",
    "summary": "Class MatchExtensions Namespace Matchmaker.Linq Assembly Matchmaker.dll A general container class for extension methods. public static class MatchExtensions Inheritance object MatchExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods EnumerateAsync<T>(IAsyncEnumerable<T>) Forces the enumeration of an IAsyncEnumerable<T> asynchronously and ignores the result. public static Task EnumerateAsync<T>(this IAsyncEnumerable<T> items) Parameters items IAsyncEnumerable<T> The async enumerable to enumerate. Returns Task Type Parameters T The type of the items in the enumerate. Exceptions ArgumentNullException items is null. Enumerate<T>(IEnumerable<T>) Forces the enumeration of an IEnumerable<T> and ignores the result. public static void Enumerate<T>(this IEnumerable<T> items) Parameters items IEnumerable<T> The enumerable to enumerate. Type Parameters T The type of the items in the enumerate. Exceptions ArgumentNullException items is null."
  },
  "api/Matchmaker.Linq.MatchResultExtensions.html": {
    "href": "api/Matchmaker.Linq.MatchResultExtensions.html",
    "title": "Class MatchResultExtensions | Matchmaker",
    "summary": "Class MatchResultExtensions Namespace Matchmaker.Linq Assembly Matchmaker.dll A container class for extension methods for MatchResult<T>. public static class MatchResultExtensions Inheritance object MatchResultExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Bind<T, TResult>(MatchResult<T>, Func<T, MatchResult<TResult>>) Returns a flat-mapped result if the specified result is successful. public static MatchResult<TResult> Bind<T, TResult>(this MatchResult<T> result, Func<T, MatchResult<TResult>> binder) Parameters result MatchResult<T> The result whose value should be flat-mapped. binder Func<T, MatchResult<TResult>> The result binding function. Returns MatchResult<TResult> A flat-mapped result if the specified result is successful. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks The binder function's parameter may be null. Exceptions ArgumentNullException binder is null. Bind<T, TResult>(Task<MatchResult<T>>, Func<T, Task<MatchResult<TResult>>>) Returns a flat-mapped result if the specified result is successful. public static Task<MatchResult<TResult>> Bind<T, TResult>(this Task<MatchResult<T>> futureResult, Func<T, Task<MatchResult<TResult>>> binder) Parameters futureResult Task<MatchResult<T>> The result whose value should be flat-mapped. binder Func<T, Task<MatchResult<TResult>>> The result binding function. Returns Task<MatchResult<TResult>> A flat-mapped result if the specified result is successful. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks The binder function's parameter may be null. Exceptions ArgumentNullException futureResult or binder is null. InvalidOperationException binder returned null. Cast<T, TResult>(MatchResult<T>) Returns a successful result if the specified result is successful and contains a value that can be cast to TResult. public static MatchResult<TResult> Cast<T, TResult>(this MatchResult<T> result) where TResult : T Parameters result MatchResult<T> The result whose value should be cast. Returns MatchResult<TResult> A successful result if the specified result is successful and contains a value that can be cast to TResult. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks If the result contains null, then this method returns a failed result only when TResult is a non-nullable value type. Cast<T, TResult>(Task<MatchResult<T>>) Returns a successful result if the specified result is successful and contains a value that can be cast to TResult. public static Task<MatchResult<TResult>> Cast<T, TResult>(this Task<MatchResult<T>> futureResult) where TResult : T Parameters futureResult Task<MatchResult<T>> The result whose value should be cast. Returns Task<MatchResult<TResult>> A successful result if the specified result is successful and contains a value that can be cast to TResult. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks If the result contains null, then this method returns a failed result only when TResult is a non-nullable value type. Exceptions ArgumentNullException futureResult is null. Do<T>(MatchResult<T>, Action<T>) Performs a specified action on the result's value if it's successful. public static MatchResult<T> Do<T>(this MatchResult<T> result, Action<T> action) Parameters result MatchResult<T> The result whose value should be passed to the action. action Action<T> The action to perform. Returns MatchResult<T> The result for which the action should be executed. Type Parameters T The type of the result's value. Remarks The action's parameter may be null. Exceptions ArgumentNullException action is null. Do<T>(Task<MatchResult<T>>, Action<T>) Performs a specified action on the result's value if it's successful. public static Task<MatchResult<T>> Do<T>(this Task<MatchResult<T>> futureResult, Action<T> action) Parameters futureResult Task<MatchResult<T>> The result whose value should be passed to the action. action Action<T> The action to perform. Returns Task<MatchResult<T>> The result for which the action should be executed. Type Parameters T The type of the result's value. Remarks The action's parameter may be null. Exceptions ArgumentNullException futureResult or action is null. Do<T>(Task<MatchResult<T>>, Func<T, Task>) Performs a specified action on the result's value if it's successful. public static Task<MatchResult<T>> Do<T>(this Task<MatchResult<T>> futureResult, Func<T, Task> action) Parameters futureResult Task<MatchResult<T>> The result whose value should be passed to the action. action Func<T, Task> The action to perform. Returns Task<MatchResult<T>> The result for which the action should be executed. Type Parameters T The type of the result's value. Remarks The action's parameter may be null. Exceptions ArgumentNullException futureResult or action is null. InvalidOperationException action returned null. GetValueOrDefault<T>(MatchResult<T>) Returns the result's value if it's successful, or the default one otherwise. public static T GetValueOrDefault<T>(this MatchResult<T> result) Parameters result MatchResult<T> The result whose value should be returned. Returns T The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. GetValueOrDefault<T>(MatchResult<T>, Func<T>) Returns the result's value if it's successful, or the default one otherwise. public static T GetValueOrDefault<T>(this MatchResult<T> result, Func<T> defaultValueProvider) Parameters result MatchResult<T> The result whose value should be returned. defaultValueProvider Func<T> The function which provides the value to return if the result is not successful. Returns T The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. Exceptions ArgumentNullException defaultValueProvider is null. GetValueOrDefault<T>(MatchResult<T>, T) Returns the result's value if it's successful, or the default one otherwise. public static T GetValueOrDefault<T>(this MatchResult<T> result, T defaultValue) Parameters result MatchResult<T> The result whose value should be returned. defaultValue T The value to return if the result is not successful. Returns T The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. GetValueOrDefault<T>(Task<MatchResult<T>>) Returns the result's value if it's successful, or the default one otherwise. public static Task<T> GetValueOrDefault<T>(this Task<MatchResult<T>> futureResult) Parameters futureResult Task<MatchResult<T>> The result whose value should be mapped. Returns Task<T> The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. Remarks The resulting Task<TResult> may contain null. Exceptions ArgumentNullException futureResult is null. GetValueOrDefault<T>(Task<MatchResult<T>>, Func<Task<T>>) Returns the result's value if it's successful, or the default one otherwise. public static Task<T> GetValueOrDefault<T>(this Task<MatchResult<T>> futureResult, Func<Task<T>> defaultValueProvider) Parameters futureResult Task<MatchResult<T>> The result whose value should be mapped. defaultValueProvider Func<Task<T>> The function which provides the value to return if the result is not successful. Returns Task<T> The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. Remarks The resulting Task<TResult> may contain null. Exceptions ArgumentNullException futureResult or defaultValueProvider is null. InvalidOperationException defaultValueProvider returned null. GetValueOrDefault<T>(Task<MatchResult<T>>, Func<T>) Returns the result's value if it's successful, or the default one otherwise. public static Task<T> GetValueOrDefault<T>(this Task<MatchResult<T>> futureResult, Func<T> defaultValueProvider) Parameters futureResult Task<MatchResult<T>> The result whose value should be mapped. defaultValueProvider Func<T> The function which provides the value to return if the result is not successful. Returns Task<T> The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. Remarks The resulting Task<TResult> may contain null. Exceptions ArgumentNullException futureResult or defaultValueProvider is null. GetValueOrDefault<T>(Task<MatchResult<T>>, T) Returns the result's value if it's successful, or the default one otherwise. public static Task<T> GetValueOrDefault<T>(this Task<MatchResult<T>> futureResult, T defaultValue) Parameters futureResult Task<MatchResult<T>> The result whose value should be returned. defaultValue T The value to return if the result is not successful. Returns Task<T> The result's value if it's successful, or the default one otherwise. Type Parameters T The type of the result's value. Remarks The resulting Task<TResult> may contain null. Exceptions ArgumentNullException futureResult is null. GetValueOrThrow<T>(MatchResult<T>, Func<Exception>) Returns the result's value if it's successful, or throws the provided exception otherwise. public static T GetValueOrThrow<T>(this MatchResult<T> result, Func<Exception> exceptionProvider) Parameters result MatchResult<T> The result whose value should be returned. exceptionProvider Func<Exception> The function which provides the exception to throw if the result is not successful. Returns T The result's value if it's successful. Type Parameters T The type of the result's value. Exceptions ArgumentNullException exceptionProvider is null. GetValueOrThrow<T>(Task<MatchResult<T>>, Func<Exception>) Returns the result's value if it's successful, or throws the provided exception otherwise. public static Task<T> GetValueOrThrow<T>(this Task<MatchResult<T>> futureResult, Func<Exception> exceptionProvider) Parameters futureResult Task<MatchResult<T>> The result whose value should be mapped. exceptionProvider Func<Exception> The function which provides the exception to throw if the result is not successful. Returns Task<T> The result's value if it's successful. Type Parameters T The type of the result's value. Remarks The resulting Task<TResult> may contain null. Exceptions ArgumentNullException futureResult or exceptionProvider is null. Select<T, TResult>(MatchResult<T>, Func<T, TResult>) Returns a result which contains a mapped value if the specified result is successful. public static MatchResult<TResult> Select<T, TResult>(this MatchResult<T> result, Func<T, TResult> mapper) Parameters result MatchResult<T> The result whose value should be mapped. mapper Func<T, TResult> The result mapping function. Returns MatchResult<TResult> A result which contains a mapped value if the specified result is successful. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks The mapper function's parameter may be null. Exceptions ArgumentNullException mapper is null. Select<T, TResult>(Task<MatchResult<T>>, Func<T, TResult>) Returns a result which contains a mapped value if the specified result is successful. public static Task<MatchResult<TResult>> Select<T, TResult>(this Task<MatchResult<T>> futureResult, Func<T, TResult> mapper) Parameters futureResult Task<MatchResult<T>> The result whose value should be mapped. mapper Func<T, TResult> The result mapping function. Returns Task<MatchResult<TResult>> A result which contains a mapped value if the specified result is successful. Otherwise, a failed result. Type Parameters T The type of the result's value. TResult The type of the returned result's value. Remarks The mapper function's parameter may be null. Exceptions ArgumentNullException futureResult or mapper is null. Where<T>(MatchResult<T>, Func<T, bool>) Returns a successful result only if the specified result is successful and its value satisfies a specified predicate. public static MatchResult<T> Where<T>(this MatchResult<T> result, Func<T, bool> predicate) Parameters result MatchResult<T> The result whose value should be checked. predicate Func<T, bool> The predicate to use to check the value. Returns MatchResult<T> A successfult result if the specified result is successful and its value satisfies a specified predicate. Otherwise, a failed result. Type Parameters T The type of the result's value. Remarks The predicate function's parameter may be null. Exceptions ArgumentNullException predicate is null. Where<T>(Task<MatchResult<T>>, Func<T, bool>) Returns a successful result only if the specified result is successful and its value satisfies a specified predicate. public static Task<MatchResult<T>> Where<T>(this Task<MatchResult<T>> futureResult, Func<T, bool> predicate) Parameters futureResult Task<MatchResult<T>> The result whose value should be checked. predicate Func<T, bool> The predicate to use to check the value. Returns Task<MatchResult<T>> A successfult result if the specified result is successful and its value satisfies a specified predicate. Otherwise, a failed result. Type Parameters T The type of the result's value. Remarks The predicate function's parameter may be null. Exceptions ArgumentNullException futureResult or predicate is null. Where<T>(Task<MatchResult<T>>, Func<T, Task<bool>>) Returns a successful result only if the specified result is successful and its value satisfies a specified predicate. public static Task<MatchResult<T>> Where<T>(this Task<MatchResult<T>> futureResult, Func<T, Task<bool>> predicate) Parameters futureResult Task<MatchResult<T>> The result whose value should be checked. predicate Func<T, Task<bool>> The predicate to use to check the value. Returns Task<MatchResult<T>> A successfult result if the specified result is successful and its value satisfies a specified predicate. Otherwise, a failed result. Type Parameters T The type of the result's value. Remarks The predicate function's parameter may be null. Exceptions ArgumentNullException futureResult or predicate is null. InvalidOperationException predicate returned null. See Also MatchResult<T> MatchResult"
  },
  "api/Matchmaker.Linq.PatternExtensions.html": {
    "href": "api/Matchmaker.Linq.PatternExtensions.html",
    "title": "Class PatternExtensions | Matchmaker",
    "summary": "Class PatternExtensions Namespace Matchmaker.Linq Assembly Matchmaker.dll A container class for extension methods for IPattern<TInput, TMatchResult>. public static class PatternExtensions Inheritance object PatternExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods And<T>(IPattern<T, T>, IPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IPattern<T, T> And<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.And) Exceptions ArgumentNullException leftPattern or rightPattern is null. And<T>(IPattern<T, T>, IPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IPattern<T, T> And<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern, string description) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.And, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) Returns an asynchronous pattern which wraps the specified synchronous pattern. public static IAsyncPattern<TInput, TMatchResult> AsAsync<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern) Parameters pattern IPattern<TInput, TMatchResult> The pattern which should be wrapped. Returns IAsyncPattern<TInput, TMatchResult> An asynchronous pattern which wraps the specified synchronous pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern is null. AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) Returns an asynchronous pattern which wraps the specified synchronous pattern. public static IAsyncPattern<TInput, TMatchResult> AsAsync<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern, string description) Parameters pattern IPattern<TInput, TMatchResult> The pattern which should be wrapped. description string The description of this pattern. Returns IAsyncPattern<TInput, TMatchResult> An asynchronous pattern which wraps the specified synchronous pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or description is null. Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>) Returns a pattern which binds (flat-maps) the result of the specified pattern. public static IPattern<TInput, TMatchResult> Bind<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, IPattern<TInput, TMatchResult>> binder) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. binder Func<TIntermediateResult, IPattern<TInput, TMatchResult>> The result binding function. Returns IPattern<TInput, TMatchResult> A pattern which binds (flat-maps) the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or binder is null. Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>, string) Returns a pattern which binds (flat-maps) the result of the specified pattern. public static IPattern<TInput, TMatchResult> Bind<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, IPattern<TInput, TMatchResult>> binder, string description) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. binder Func<TIntermediateResult, IPattern<TInput, TMatchResult>> The result binding function. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which binds (flat-maps) the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern, binder or description is null. Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) Returns a pattern which matches the same as the specified pattern, but caches its results. public static IPattern<TInput, TMatchResult> Cached<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern) Parameters pattern IPattern<TInput, TMatchResult> The pattern whose results should be cached. Returns IPattern<TInput, TMatchResult> A pattern which matches the same as the specified pattern, but caches its results. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks The returned pattern's caching process is not thread-safe. The cache itself is a simple null-safe hash table. Exceptions ArgumentNullException pattern is null. Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) Returns a pattern which matches the same as the specified pattern, but caches its results. public static IPattern<TInput, TMatchResult> Cached<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern, string description) Parameters pattern IPattern<TInput, TMatchResult> The pattern whose results should be cached. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which matches the same as the specified pattern, but caches its results. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks The returned pattern's caching process is not thread-safe. The cache itself is a simple null-safe hash table. Exceptions ArgumentNullException pattern or description is null. Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>) Returns a pattern which casts the result of the specified pattern to another type. public static IPattern<TInput, TMatchResult> Cast<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern) where TMatchResult : TIntermediateResult Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be cast. Returns IPattern<TInput, TMatchResult> A pattern which casts the result of the specified pattern to another type. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.Type<TIntermediateResult, TMatchResult>()) As such, this pattern fails if the input is null and TMatchResult is a non-nullable value type. Exceptions ArgumentNullException pattern is null. Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, string) Returns a pattern which casts the result of the specified pattern to another type. public static IPattern<TInput, TMatchResult> Cast<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, string description) where TMatchResult : TIntermediateResult Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be cast. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.Type<TIntermediateResult, TMatchResult>(), description) As such, this pattern fails if the input is null and TMatchResult is a non-nullable value type. Exceptions ArgumentNullException pattern or description is null. Compose<T>(IPattern<T, T>, IPattern<T, T>, PatternComposition) Returns a pattern which is composed of the two specified patterns. public static IPattern<T, T> Compose<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern, PatternComposition composition) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. composition PatternComposition The composition which should be applied to the patterns. Returns IPattern<T, T> A pattern which is composed of the two specified patterns. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. Exceptions ArgumentNullException leftPattern or rightPattern is null. Compose<T>(IPattern<T, T>, IPattern<T, T>, PatternComposition, string) Returns a pattern which is composed of the two specified patterns. public static IPattern<T, T> Compose<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern, PatternComposition composition, string description) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. composition PatternComposition The composition which should be applied to the patterns. description string The description of this pattern. Returns IPattern<T, T> A pattern which is composed of the two specified patterns. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. Exceptions ArgumentNullException leftPattern, rightPattern or description is null. Or<T>(IPattern<T, T>, IPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IPattern<T, T> Or<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Or) Exceptions ArgumentNullException leftPattern or rightPattern is null. Or<T>(IPattern<T, T>, IPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful when either pattern's result is successful. public static IPattern<T, T> Or<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern, string description) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful when either pattern's result is successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Or, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>) Returns a pattern which pipes the result of one pattern to the other pattern. public static IPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> firstPattern, IPattern<TIntermediateResult, TMatchResult> secondPattern) Parameters firstPattern IPattern<TInput, TIntermediateResult> The pattern whose result should be piped. secondPattern IPattern<TIntermediateResult, TMatchResult> The pattern whose input is the first pattern's output. Returns IPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException firstPattern or secondPattern is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>, string) Returns a pattern which pipes the result of one pattern to the other pattern. public static IPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> firstPattern, IPattern<TIntermediateResult, TMatchResult> secondPattern, string description) Parameters firstPattern IPattern<TInput, TIntermediateResult> The pattern whose result should be piped. secondPattern IPattern<TIntermediateResult, TMatchResult> The pattern whose input is the first pattern's output. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the other pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException firstPattern, secondPattern or description is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>) Returns a pattern which pipes the result of one pattern to the pattern created by the specified matcher function. public static IPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, MatchResult<TMatchResult>> matcher) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be piped. matcher Func<TIntermediateResult, MatchResult<TMatchResult>> The pattern whose input is the first pattern's output. Returns IPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the pattern created by the specified matcher function. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following, except it reuses the pattern's description: pattern.Pipe(Pattern.CreatePattern(matcher)) Exceptions ArgumentNullException pattern or matcher is null. Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>, string) Returns a pattern which pipes the result of one pattern to the pattern created by the specified matcher function. public static IPattern<TInput, TMatchResult> Pipe<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, MatchResult<TMatchResult>> matcher, string description) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be piped. matcher Func<TIntermediateResult, MatchResult<TMatchResult>> The pattern whose input is the first pattern's output. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which pipes the result of one pattern to the pattern created by the specified matcher function. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Remarks This method is functionally equivalent to the following: pattern.Pipe(Pattern.CreatePattern(matcher), description) Exceptions ArgumentNullException pattern, matcher or description is null. Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) Returns a pattern which maps the result of the specified pattern. public static IPattern<TInput, TMatchResult> Select<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, TMatchResult> mapper) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. mapper Func<TIntermediateResult, TMatchResult> The result mapping function. Returns IPattern<TInput, TMatchResult> A pattern which maps the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or mapper is null. Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) Returns a pattern which maps the result of the specified pattern. public static IPattern<TInput, TMatchResult> Select<TInput, TIntermediateResult, TMatchResult>(this IPattern<TInput, TIntermediateResult> pattern, Func<TIntermediateResult, TMatchResult> mapper, string description) Parameters pattern IPattern<TInput, TIntermediateResult> The pattern whose result should be mapped. mapper Func<TIntermediateResult, TMatchResult> The result mapping function. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which maps the result of the specified pattern when it's successful. Type Parameters TInput The type of the input value of the expression. TIntermediateResult The type of the result of the specified pattern's match. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern, mapper or description is null. Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) Returns a pattern which adds a condition to the specified pattern. public static IPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, bool> predicate) Parameters pattern IPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, bool> The condition to add. Returns IPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) Returns a pattern which adds a condition to the specified pattern. public static IPattern<TInput, TMatchResult> Where<TInput, TMatchResult>(this IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, bool> predicate, string description) Parameters pattern IPattern<TInput, TMatchResult> The pattern whose result should be mapped. predicate Func<TMatchResult, bool> The condition to add. description string The description of this pattern. Returns IPattern<TInput, TMatchResult> A pattern which adds a condition to the specified pattern. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Exceptions ArgumentNullException pattern or predicate is null. Xor<T>(IPattern<T, T>, IPattern<T, T>) Returns a pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. public static IPattern<T, T> Xor<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful only when both patterns' results are successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Xor) Exceptions ArgumentNullException leftPattern or rightPattern is null. Xor<T>(IPattern<T, T>, IPattern<T, T>, string) Returns a pattern which is composed of the two specified patterns such that the result is successful when only one pattern's result is successful. public static IPattern<T, T> Xor<T>(this IPattern<T, T> leftPattern, IPattern<T, T> rightPattern, string description) Parameters leftPattern IPattern<T, T> The left pattern to compose. rightPattern IPattern<T, T> The right pattern to compose. description string The description of this pattern. Returns IPattern<T, T> A pattern which is composed of the two specified patterns such that the result is successful when only one pattern's result is successful. Type Parameters T The type of the input value of the expression and also the type of the result of this pattern's match. Remarks The resulting pattern ignores the patterns' transformations and returns the input value if matched successfully. This method is functionally equivalent to the following: leftPattern.Compose(rightPattern, PatternComposition.Xor, description) Exceptions ArgumentNullException leftPattern, rightPattern or description is null. See Also IPattern<TInput, TMatchResult>"
  },
  "api/Matchmaker.Linq.html": {
    "href": "api/Matchmaker.Linq.html",
    "title": "Namespace Matchmaker.Linq | Matchmaker",
    "summary": "Namespace Matchmaker.Linq Classes AsyncPatternExtensions A container class for extension methods for IAsyncPattern<TInput, TMatchResult>. MatchExtensions A general container class for extension methods. MatchResultExtensions A container class for extension methods for MatchResult<T>. PatternExtensions A container class for extension methods for IPattern<TInput, TMatchResult>."
  },
  "api/Matchmaker.Match-1.html": {
    "href": "api/Matchmaker.Match-1.html",
    "title": "Class Match<TInput> | Matchmaker",
    "summary": "Class Match<TInput> Namespace Matchmaker Assembly Matchmaker.dll Represents a match statement - a match expression that doesn't yield a value. public sealed class Match<TInput> Type Parameters TInput The type of the input value of the expression. Inheritance object Match<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IPattern<TInput, TMatchResult>, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public Match<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns Match<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Returns a new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. public Match<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. action Action<TMatchResult> The action to execute if the match is successful. Returns Match<TInput> A new match statement which includes the specified pattern and action to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TType>(Action<TType>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public Match<TInput> Case<TType>(Action<TType> action) where TType : TInput Parameters action Action<TType> The action to execute if the match is successful. Returns Match<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(Pattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Action<TType>) Returns a new match statement which includes the pattern for the specified type and action to execute if this pattern is matched successfully. public Match<TInput> Case<TType>(bool fallthrough, Action<TType> action) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. action Action<TType> The action to execute if the match is successful. Returns Match<TInput> A new match statement which includes the type pattern and action to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(Pattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. ExecuteNonStrict(TInput) Executes the match statement non-strictly on the specified input. public bool ExecuteNonStrict(TInput input) Parameters input TInput The input value of the statement. Returns bool true, if the match was successful. Otherwise, false. ExecuteOn(TInput) Executes the match statement strictly on the specified input. public void ExecuteOn(TInput input) Parameters input TInput The input value of the statement. Exceptions MatchException The match failed for all cases. ExecuteWithFallthrough(TInput) Executes the match statement on the specified input with fallthrough lazily. public IEnumerable<object?> ExecuteWithFallthrough(TInput input) Parameters input TInput The input value of the statement. Returns IEnumerable<object> An enumerable of null objects which enables the execution to be lazy. The number of items in this enumerable equals the number of successful cases. ToFunction() Returns an action which, when called, will match the specified value. public Action<TInput> ToFunction() Returns Action<TInput> An action which, when called, will match the specified value. ToFunctionWithFallthrough() Returns a function which, when called, will match the specified value with fallthrough. public Func<TInput, IEnumerable<object?>> ToFunctionWithFallthrough() Returns Func<TInput, IEnumerable<object>> A function which, when called, will match the specified value with fallthrough. ToNonStrictFunction() Returns a function which, when called, will match the specified value non-strictly. public Func<TInput, bool> ToNonStrictFunction() Returns Func<TInput, bool> A function which, when called, will match the specified value non-strictly. See Also Match<TInput, TOutput> Match MatchException"
  },
  "api/Matchmaker.Match-2.html": {
    "href": "api/Matchmaker.Match-2.html",
    "title": "Class Match<TInput, TOutput> | Matchmaker",
    "summary": "Class Match<TInput, TOutput> Namespace Matchmaker Assembly Matchmaker.dll Represents a match expression. public sealed class Match<TInput, TOutput> Type Parameters TInput The type of the input value of the expression. TOutput The type of the output value of the expression. Inheritance object Match<TInput, TOutput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public Match<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behaviour. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns Match<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Returns a new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. public Match<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns Match<TInput, TOutput> A new match expression which includes the specified pattern and function to execute if this pattern is matched successfully. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TType>(bool, Func<TType, TOutput>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public Match<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, TOutput> func) where TType : TInput Parameters fallthrough bool The fallthrough behaviour. func Func<TType, TOutput> The function to execute if the match is successful. Returns Match<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(Pattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, TOutput>) Returns a new match expression which includes the pattern for the specified type and function to execute if this pattern is matched successfully. public Match<TInput, TOutput> Case<TType>(Func<TType, TOutput> func) where TType : TInput Parameters func Func<TType, TOutput> The function to execute if the match is successful. Returns Match<TInput, TOutput> A new match expression which includes the type pattern and function to execute if this pattern is matched successfully. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: match.Case(Pattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. ExecuteNonStrict(TInput) Executes the match expression on the specified input and returns the result. public MatchResult<TOutput> ExecuteNonStrict(TInput input) Parameters input TInput The input value of the expression. Returns MatchResult<TOutput> The result of the match expression, or a failed result if no pattern was matched successfully. ExecuteOn(TInput) Executes the match expression on the specified input and returns the result. public TOutput ExecuteOn(TInput input) Parameters input TInput The input value of the expression. Returns TOutput The result of the match expression. Exceptions MatchException The match failed for all cases. ExecuteWithFallthrough(TInput) Executes the match expression on the specified input with fallthrough and lazily returns the results. public IEnumerable<TOutput> ExecuteWithFallthrough(TInput input) Parameters input TInput The input value of the expression. Returns IEnumerable<TOutput> The results of the match expression, empty if no pattern is matched successfully. Remarks This method returns a lazy enumerable - it will check only as many patterns, as are needed to return one result at a time. The enumerable may contain null values. ToFunction() Returns a function which, when called, will match the specified value. public Func<TInput, TOutput> ToFunction() Returns Func<TInput, TOutput> A function which, when called, will match the specified value. ToFunctionWithFallthrough() Returns a function which, when called, will match the specified value. public Func<TInput, IEnumerable<TOutput>> ToFunctionWithFallthrough() Returns Func<TInput, IEnumerable<TOutput>> A function which, when called, will match the specified value. Remarks This method returns a lazy enumerable - it will check only as many patterns, as are needed to return one result at a time. The enumerable may contain null values. ToNonStrictFunction() Returns a function which, when called, will match the specified value. public Func<TInput, MatchResult<TOutput>> ToNonStrictFunction() Returns Func<TInput, MatchResult<TOutput>> A function which, when called, will match the specified value. See Also Match<TInput> Match MatchException"
  },
  "api/Matchmaker.Match.html": {
    "href": "api/Matchmaker.Match.html",
    "title": "Class Match | Matchmaker",
    "summary": "Class Match Namespace Matchmaker Assembly Matchmaker.dll A static class which is used to create match expressions. public static class Match Inheritance object Match Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ClearCache<TInput>() Clears the global cache of static Match<TInput> instances. public static void ClearCache<TInput>() Type Parameters TInput The type of the input value. Remarks After calling this method all CreateStatic<TInput>(Action<MatchBuilder<TInput>>, string, int) calls will recalculate match statements for type TInput. Clearing the cache is not thread-safe. ClearCache<TInput, TOutput>() Clears the global cache of static Match<TInput, TOutput> instances. public static void ClearCache<TInput, TOutput>() Type Parameters TInput The type of the input value. TOutput The type of the result. Remarks After calling this method all CreateStatic<TInput, TOutput>(Action<MatchBuilder<TInput, TOutput>>, string, int) calls will recalculate match expressions for types TInput and TOutput. Clearing the cache is not thread-safe. CreateStatic<TInput>(Action<MatchBuilder<TInput>>, string, int) Creates a match statement which is then globally cached. public static Match<TInput> CreateStatic<TInput>(Action<MatchBuilder<TInput>> buildAction, string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters buildAction Action<MatchBuilder<TInput>> The action which builds the match statement. sourceFilePath string The path to the source file in which this method is called. sourceLineNumber int The line in the source file where this method is called. Returns Match<TInput> The globally cached match expression. Type Parameters TInput The type of the input value. Remarks The key of the cache is the location of this method's call in the source code. This way, a new match statement object will not be allocated every time pattern matching occurs in the same place more than once. The pattern caching process is not thread-safe. Exceptions ArgumentNullException buildAction or sourceFilePath is null. CreateStatic<TInput, TOutput>(Action<MatchBuilder<TInput, TOutput>>, string, int) Creates a match expression which is then globally cached. public static Match<TInput, TOutput> CreateStatic<TInput, TOutput>(Action<MatchBuilder<TInput, TOutput>> buildAction, string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters buildAction Action<MatchBuilder<TInput, TOutput>> The action which builds the match expression. sourceFilePath string The path to the source file in which this method is called. sourceLineNumber int The line in the source file where this method is called. Returns Match<TInput, TOutput> The globally cached match expression. Type Parameters TInput The type of the input value. TOutput The type of the result. Remarks The key of the cache is the location of this method's call in the source code. This way, a new match expression object will not be allocated every time pattern matching occurs in the same place more than once. The pattern caching process is not thread-safe. Exceptions ArgumentNullException buildAction or sourceFilePath is null. Create<TInput>() Creates a match statement. public static Match<TInput> Create<TInput>() Returns Match<TInput> A match statement which specifies the patterns to match with and actions which are executed. Type Parameters TInput The type of the input value. Create<TInput>(bool) Creates a match statement with the specified default fallthrough behaviour. public static Match<TInput> Create<TInput>(bool fallthroughByDefault) Parameters fallthroughByDefault bool The default fallthrough behaviour. Returns Match<TInput> A match statement which specifies the patterns to match with and actions which are executed. Type Parameters TInput The type of the input value. Create<TInput, TOutput>() Creates a match expression. public static Match<TInput, TOutput> Create<TInput, TOutput>() Returns Match<TInput, TOutput> A match expression which specifies the patterns to match with and functions which are executed. Type Parameters TInput The type of the input value. TOutput The type of the result. Create<TInput, TOutput>(bool) Creates a match expression. public static Match<TInput, TOutput> Create<TInput, TOutput>(bool fallthroughByDefault) Parameters fallthroughByDefault bool The default fallthrough behaviour. Returns Match<TInput, TOutput> A match expression which specifies the patterns to match with and functions which are executed. Type Parameters TInput The type of the input value. TOutput The type of the result. See Also Match<TInput, TOutput> Match<TInput> MatchBuilder<TInput, TOutput> MatchBuilder<TInput>"
  },
  "api/Matchmaker.MatchBuilder-1.html": {
    "href": "api/Matchmaker.MatchBuilder-1.html",
    "title": "Class MatchBuilder<TInput> | Matchmaker",
    "summary": "Class MatchBuilder<TInput> Namespace Matchmaker Assembly Matchmaker.dll Represents a match statement builder. public sealed class MatchBuilder<TInput> Type Parameters TInput The type of the input value of the expression. Inheritance object MatchBuilder<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IPattern<TInput, TMatchResult>, Action<TMatchResult>) Add the specified case to the match statement. public MatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. action Action<TMatchResult> The action to execute if the match is successful. Returns MatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Action<TMatchResult>) Add the specified case to the match statement. public MatchBuilder<TInput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Action<TMatchResult> action) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. action Action<TMatchResult> The action to execute if the match is successful. Returns MatchBuilder<TInput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or action is null. Case<TType>(Action<TType>) Add the specified case to the match statement. public MatchBuilder<TInput> Case<TType>(Action<TType> action) where TType : TInput Parameters action Action<TType> The action to execute if the match is successful. Returns MatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(Pattern.Type<TInput, TType>(), action) Exceptions ArgumentNullException action is null. Case<TType>(bool, Action<TType>) Add the specified case to the match statement. public MatchBuilder<TInput> Case<TType>(bool fallthrough, Action<TType> action) where TType : TInput Parameters fallthrough bool The fallthrough behavior. action Action<TType> The action to execute if the match is successful. Returns MatchBuilder<TInput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(Pattern.Type<TInput, TType>(), fallthrough, action) Exceptions ArgumentNullException action is null. Fallthrough(bool) Sets the default fallthrough behavior for the match statement. public MatchBuilder<TInput> Fallthrough(bool fallthrough) Parameters fallthrough bool The default fallthrough behavior. Returns MatchBuilder<TInput> The calling builder. See Also Match<TInput>"
  },
  "api/Matchmaker.MatchBuilder-2.html": {
    "href": "api/Matchmaker.MatchBuilder-2.html",
    "title": "Class MatchBuilder<TInput, TOutput> | Matchmaker",
    "summary": "Class MatchBuilder<TInput, TOutput> Namespace Matchmaker Assembly Matchmaker.dll Represents a match expression builder. public sealed class MatchBuilder<TInput, TOutput> Type Parameters TInput The type of the input value of the expression. TOutput The type of the output value of the expression. Inheritance object MatchBuilder<TInput, TOutput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Case<TMatchResult>(IPattern<TInput, TMatchResult>, bool, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public MatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, bool fallthrough, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. fallthrough bool The fallthrough behavior. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns MatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, TOutput>) Add the specified case to the match expression. public MatchBuilder<TInput, TOutput> Case<TMatchResult>(IPattern<TInput, TMatchResult> pattern, Func<TMatchResult, TOutput> func) Parameters pattern IPattern<TInput, TMatchResult> The pattern to match with. func Func<TMatchResult, TOutput> The function to execute if the match is successful. Returns MatchBuilder<TInput, TOutput> The calling builder. Type Parameters TMatchResult The type of the result of the pattern's match. Exceptions ArgumentNullException pattern or func is null. Case<TType>(bool, Func<TType, TOutput>) Add the specified case to the match expression. public MatchBuilder<TInput, TOutput> Case<TType>(bool fallthrough, Func<TType, TOutput> func) where TType : TInput Parameters fallthrough bool The fallthrough behavior. func Func<TType, TOutput> The function to execute if the match is successful. Returns MatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(Pattern.Type<TInput, TType>(), fallthrough, func) Exceptions ArgumentNullException func is null. Case<TType>(Func<TType, TOutput>) Add the specified case to the match expression. public MatchBuilder<TInput, TOutput> Case<TType>(Func<TType, TOutput> func) where TType : TInput Parameters func Func<TType, TOutput> The function to execute if the match is successful. Returns MatchBuilder<TInput, TOutput> The calling builder. Type Parameters TType The type of the result of the pattern's match. Remarks This method is functionally equivalent to the following: builder.Case(Pattern.Type<TInput, TType>(), func) Exceptions ArgumentNullException func is null. Fallthrough(bool) Sets the default fallthrough behavior for the match expression. public MatchBuilder<TInput, TOutput> Fallthrough(bool fallthrough) Parameters fallthrough bool The default fallthrough behavior. Returns MatchBuilder<TInput, TOutput> The calling builder. See Also Match<TInput, TOutput>"
  },
  "api/Matchmaker.MatchException.html": {
    "href": "api/Matchmaker.MatchException.html",
    "title": "Class MatchException | Matchmaker",
    "summary": "Class MatchException Namespace Matchmaker Assembly Matchmaker.dll Represents an exception which is thrown when a match expression hasn't found a successful pattern. public class MatchException : Exception, ISerializable Inheritance object Exception MatchException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MatchException() Initializes a new instance of the MatchException class. public MatchException() MatchException(string) Initializes a new instance of the MatchException class. public MatchException(string message) Parameters message string The message which describes this exception. MatchException(string, Exception) Initializes a new instance of the MatchException class. public MatchException(string message, Exception innerException) Parameters message string The message which describes this exception. innerException Exception The exception, which caused this exception. See Also Match<TInput, TOutput> Match<TInput> AsyncMatch<TInput, TOutput> AsyncMatch<TInput>"
  },
  "api/Matchmaker.MatchResult-1.html": {
    "href": "api/Matchmaker.MatchResult-1.html",
    "title": "Struct MatchResult<T> | Matchmaker",
    "summary": "Struct MatchResult<T> Namespace Matchmaker Assembly Matchmaker.dll Represents the result of a pattern match. public readonly struct MatchResult<T> : IEquatable<MatchResult<T>> Type Parameters T The type of the value contained in this class. Implements IEquatable<MatchResult<T>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods MatchResultExtensions.Bind<T, TResult>(MatchResult<T>, Func<T, MatchResult<TResult>>) MatchResultExtensions.Cast<T, TResult>(MatchResult<T>) MatchResultExtensions.Do<T>(MatchResult<T>, Action<T>) MatchResultExtensions.GetValueOrDefault<T>(MatchResult<T>) MatchResultExtensions.GetValueOrDefault<T>(MatchResult<T>, Func<T>) MatchResultExtensions.GetValueOrDefault<T>(MatchResult<T>, T) MatchResultExtensions.GetValueOrThrow<T>(MatchResult<T>, Func<Exception>) MatchResultExtensions.Select<T, TResult>(MatchResult<T>, Func<T, TResult>) MatchResultExtensions.Where<T>(MatchResult<T>, Func<T, bool>) Remarks If the result is successful, it contains a value which may be null. If it is not, then it doesn't contain a value. Properties IsSuccessful Gets the value which indicates whether the match result is successful. public bool IsSuccessful { get; } Property Value bool Value Gets the value if the match result is successful. If it is not, then throws an InvalidOperationException. public T Value { get; } Property Value T Exceptions InvalidOperationException The result is not successful. Methods Equals(MatchResult<T>) Compares this match result to another match result. public bool Equals(MatchResult<T> other) Parameters other MatchResult<T> The match result to compare to. Returns bool true if this match result is equal to the other match result. Otherwise, false. Equals(object?) Compares this match result to another object. public override bool Equals(object? obj) Parameters obj object The object to compare to. Returns bool true if this match result is equal to the other object. Otherwise, false. GetHashCode() Returns the hash code of this match result. public override int GetHashCode() Returns int The hash code of this match result. ToString() Returns the string representation of this match result. public override string ToString() Returns string The string representation of this match result. Operators operator ==(MatchResult<T>, MatchResult<T>) Compares two match results for equality. public static bool operator ==(MatchResult<T> left, MatchResult<T> right) Parameters left MatchResult<T> The left match result. right MatchResult<T> The right match result. Returns bool true if the match results are equal. Otherwise, false. operator !=(MatchResult<T>, MatchResult<T>) Compares two match results for inequality. public static bool operator !=(MatchResult<T> left, MatchResult<T> right) Parameters left MatchResult<T> The left match result. right MatchResult<T> The right match result. Returns bool true if the match results are not equal. Otherwise, false. See Also MatchResult MatchResultExtensions"
  },
  "api/Matchmaker.MatchResult.html": {
    "href": "api/Matchmaker.MatchResult.html",
    "title": "Class MatchResult | Matchmaker",
    "summary": "Class MatchResult Namespace Matchmaker Assembly Matchmaker.dll A static class which is used to create match results. public static class MatchResult Inheritance object MatchResult Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Failure<T>() Returns a failed match result. public static MatchResult<T> Failure<T>() Returns MatchResult<T> A failed match result. Type Parameters T Success<T>(T) Returns a successful match result with the specified value. public static MatchResult<T> Success<T>(T value) Parameters value T The value of the result. Returns MatchResult<T> A successful match result with the specified value. Type Parameters T See Also MatchResult<T>"
  },
  "api/Matchmaker.Patterns.Async.AsyncPattern-2.html": {
    "href": "api/Matchmaker.Patterns.Async.AsyncPattern-2.html",
    "title": "Class AsyncPattern<TInput, TMatchResult> | Matchmaker",
    "summary": "Class AsyncPattern<TInput, TMatchResult> Namespace Matchmaker.Patterns.Async Assembly Matchmaker.dll Represents a base class for asynchronous patterns. public abstract class AsyncPattern<TInput, TMatchResult> : IAsyncPattern<TInput, TMatchResult> Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Inheritance object AsyncPattern<TInput, TMatchResult> Implements IAsyncPattern<TInput, TMatchResult> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods AsyncPatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>) AsyncPatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>, string) AsyncPatternExtensions.Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>) AsyncPatternExtensions.Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, string) AsyncPatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>) AsyncPatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, string) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>, string) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>, string) AsyncPatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) AsyncPatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>, string) Constructors AsyncPattern() Initializes a new instance of the Pattern<TInput, TMatchResult> class. protected AsyncPattern() AsyncPattern(string) Initializes a new instance of the AsyncPattern<TInput, TMatchResult> class with the specified description. protected AsyncPattern(string description) Parameters description string The description of this pattern. Exceptions ArgumentNullException description is null. Properties Description Gets the description of this pattern. public string Description { get; } Property Value string Methods MatchAsync(TInput) Matches the input with this pattern, and returns a transformed result asynchronously. public abstract Task<MatchResult<TMatchResult>> MatchAsync(TInput input) Parameters input TInput The input value to match. Returns Task<MatchResult<TMatchResult>> A successful match result which contains the transformed result of the match, if this match is successful. Otherwise, a failed match result. ToString() Returns the description of this pattern, if it has one. public override string ToString() Returns string The description of this pattern, if it has one. Otherwise, the name of this pattern's type. See Also IAsyncPattern<TInput, TMatchResult> AsyncPattern"
  },
  "api/Matchmaker.Patterns.Async.AsyncPattern.html": {
    "href": "api/Matchmaker.Patterns.Async.AsyncPattern.html",
    "title": "Class AsyncPattern | Matchmaker",
    "summary": "Class AsyncPattern Namespace Matchmaker.Patterns.Async Assembly Matchmaker.dll Contains factory methods for creating asynchronous patterns. public static class AsyncPattern Inheritance object AsyncPattern Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields DefaultAndDescriptionFormat The default description of the 'and' pattern combinator. public static readonly string DefaultAndDescriptionFormat Field Value string DefaultAnyDescription The default description of the 'any' pattern. public static readonly string DefaultAnyDescription Field Value string DefaultEqualToDescription The default description of equality patterns. public static readonly string DefaultEqualToDescription Field Value string DefaultGreaterOrEqualDescription The default description of greater-or-equal patterns. public static readonly string DefaultGreaterOrEqualDescription Field Value string DefaultGreaterThanDescription The default description of greater-than patterns. public static readonly string DefaultGreaterThanDescription Field Value string DefaultLessOrEqualDescription The default description of less-or-equal patterns. public static readonly string DefaultLessOrEqualDescription Field Value string DefaultLessThanDescription The default description of less-than patterns. public static readonly string DefaultLessThanDescription Field Value string DefaultNotDescriptionFormat The default description of the 'not' pattern combinators. public static readonly string DefaultNotDescriptionFormat Field Value string DefaultNullDescription The default description of 'null' patterns. public static readonly string DefaultNullDescription Field Value string DefaultOrDescriptionFormat The default description of the 'or' pattern combinator. public static readonly string DefaultOrDescriptionFormat Field Value string DefaultPipeDescriptionFormat The default description of piping patterns. public static readonly string DefaultPipeDescriptionFormat Field Value string DefaultReturnDescription The default description of the 'return' pattern. public static readonly string DefaultReturnDescription Field Value string DefaultTypeDescriptionFormat The default description of type patterns. public static readonly string DefaultTypeDescriptionFormat Field Value string DefaultXorDescriptionFormat The default description of the 'xor' pattern combinator. public static readonly string DefaultXorDescriptionFormat Field Value string Methods Any<TInput>() Returns a pattern which is always matched successfully. public static IAsyncPattern<TInput, TInput> Any<TInput>() Returns IAsyncPattern<TInput, TInput> A pattern which is always matched successfully. Type Parameters TInput The type of the input value of the expression. Remarks This pattern should be used as the default case of a match expression, if one is needed. Any<TInput>(string) Returns a pattern which is always matched successfully. public static IAsyncPattern<TInput, TInput> Any<TInput>(string description) Parameters description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is always matched successfully. Type Parameters TInput The type of the input value of the expression. Remarks This pattern should be used as the default case of a match expression, if one is needed. Exceptions ArgumentNullException description is null. CreatePattern<TInput>(Func<TInput, Task<bool>>) Creates a pattern which uses a specified predicate to match its inputs. public static IAsyncPattern<TInput, TInput> CreatePattern<TInput>(Func<TInput, Task<bool>> predicate) Parameters predicate Func<TInput, Task<bool>> The predicate which matches the inputs. Returns IAsyncPattern<TInput, TInput> A pattern which matches its inputs according to the specified predicate. Type Parameters TInput The type of the pattern's inputs. Exceptions ArgumentNullException predicate is null. CreatePattern<TInput>(Func<TInput, Task<bool>>, string) Creates a pattern which uses a specified predicate to match its inputs and has a specified description. public static IAsyncPattern<TInput, TInput> CreatePattern<TInput>(Func<TInput, Task<bool>> predicate, string description) Parameters predicate Func<TInput, Task<bool>> The predicate which matches the inputs. description string The pattern's description. Returns IAsyncPattern<TInput, TInput> A pattern which matches its inputs according to the specified predicate. Type Parameters TInput The type of the pattern's inputs. Exceptions ArgumentNullException predicate or description is null. CreatePattern<TInput, TMatchResult>(Func<TInput, Task<MatchResult<TMatchResult>>>) Creates a pattern which uses a specified function to match its inputs. public static IAsyncPattern<TInput, TMatchResult> CreatePattern<TInput, TMatchResult>(Func<TInput, Task<MatchResult<TMatchResult>>> matcher) Parameters matcher Func<TInput, Task<MatchResult<TMatchResult>>> The function which matches the inputs. Returns IAsyncPattern<TInput, TMatchResult> A pattern which matches its inputs according to the specified matcher function. Type Parameters TInput The type of the pattern's inputs. TMatchResult The type of the pattern's results. Exceptions ArgumentNullException matcher is null. CreatePattern<TInput, TMatchResult>(Func<TInput, Task<MatchResult<TMatchResult>>>, string) Creates a pattern which uses a specified function to match its inputs and has a specified description. public static IAsyncPattern<TInput, TMatchResult> CreatePattern<TInput, TMatchResult>(Func<TInput, Task<MatchResult<TMatchResult>>> matcher, string description) Parameters matcher Func<TInput, Task<MatchResult<TMatchResult>>> The function which matches the inputs. description string The pattern's description. Returns IAsyncPattern<TInput, TMatchResult> A pattern which matches its inputs according to the specified matcher function. Type Parameters TInput The type of the pattern's inputs. TMatchResult The type of the pattern's results. Exceptions ArgumentNullException matcher or description is null. EqualTo<TInput>(Func<Task<TInput>>) Returns a pattern which is matched successfully when the input value is equal to the provided value. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Func<Task<TInput>> valueProvider) Parameters valueProvider Func<Task<TInput>> The provider of the value to check for equality. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider is null. EqualTo<TInput>(Func<Task<TInput>>, IEqualityComparer<TInput>) Returns a pattern which is matched successfully when the input value is equal to the provided value according to the specified equality comparer. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Func<Task<TInput>> valueProvider, IEqualityComparer<TInput> comparer) Parameters valueProvider Func<Task<TInput>> The provider of the value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or comparer is null. EqualTo<TInput>(Func<Task<TInput>>, IEqualityComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the provided value according to the specified equality comparer. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Func<Task<TInput>> valueProvider, IEqualityComparer<TInput> comparer, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider, comparer or description is null. EqualTo<TInput>(Func<Task<TInput>>, string) Returns a pattern which is matched successfully when the input value is equal to the provided value. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Func<Task<TInput>> valueProvider, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to check for equality. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or description is null. EqualTo<TInput>(Task<TInput>) Returns a pattern which is matched successfully when the input value is equal to the specified value. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Task<TInput> value) Parameters value Task<TInput> The value to check for equality. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value is null. EqualTo<TInput>(Task<TInput>, IEqualityComparer<TInput>) Returns a pattern which is matched successfully when the input value is equal to the specified value according to the specified equality comparer. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Task<TInput> value, IEqualityComparer<TInput> comparer) Parameters value Task<TInput> The value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or comparer is null. EqualTo<TInput>(Task<TInput>, IEqualityComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the specified value according to the specified equality comparer. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Task<TInput> value, IEqualityComparer<TInput> comparer, string description) Parameters value Task<TInput> The value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value, comparer or description is null. EqualTo<TInput>(Task<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the specified value. public static IAsyncPattern<TInput, TInput> EqualTo<TInput>(Task<TInput> value, string description) Parameters value Task<TInput> The value to check for equality. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or description is null. GreaterOrEqual<TInput>(Func<Task<TInput>>) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<Task<TInput>> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider is null. GreaterOrEqual<TInput>(Func<Task<TInput>>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or comparer is null. GreaterOrEqual<TInput>(Func<Task<TInput>>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider, comparer or description is null. GreaterOrEqual<TInput>(Func<Task<TInput>>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<Task<TInput>> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or description is null. GreaterOrEqual<TInput>(Task<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Task<TInput> value) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value is null. GreaterOrEqual<TInput>(Task<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Task<TInput> value, IComparer<TInput> comparer) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or comparer is null. GreaterOrEqual<TInput>(Task<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Task<TInput> value, IComparer<TInput> comparer, string description) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value, comparer or description is null. GreaterOrEqual<TInput>(Task<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value. public static IAsyncPattern<TInput, TInput> GreaterOrEqual<TInput>(Task<TInput> value, string description) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or description is null. GreaterThan<TInput>(Func<Task<TInput>>) Returns a pattern which is matched successfully when the input value is greater than the provided value. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Func<Task<TInput>> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider is null. GreaterThan<TInput>(Func<Task<TInput>>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or comparer is null. GreaterThan<TInput>(Func<Task<TInput>>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider, comparer or description is null. GreaterThan<TInput>(Func<Task<TInput>>, string) Returns a pattern which is matched successfully when the input value is greater than the provided value. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Func<Task<TInput>> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or description is null. GreaterThan<TInput>(Task<TInput>) Returns a pattern which is matched successfully when the input value is greater than the specified value. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Task<TInput> value) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value is null. GreaterThan<TInput>(Task<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Task<TInput> value, IComparer<TInput> comparer) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or comparer is null. GreaterThan<TInput>(Task<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Task<TInput> value, IComparer<TInput> comparer, string description) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value, comparer or description is null. GreaterThan<TInput>(Task<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the specified value. public static IAsyncPattern<TInput, TInput> GreaterThan<TInput>(Task<TInput> value, string description) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or description is null. LessOrEqual<TInput>(Func<Task<TInput>>) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Func<Task<TInput>> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider is null. LessOrEqual<TInput>(Func<Task<TInput>>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or comparer is null. LessOrEqual<TInput>(Func<Task<TInput>>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider, comparer or description is null. LessOrEqual<TInput>(Func<Task<TInput>>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Func<Task<TInput>> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or description is null. LessOrEqual<TInput>(Task<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Task<TInput> value) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value is null. LessOrEqual<TInput>(Task<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Task<TInput> value, IComparer<TInput> comparer) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or comparer is null. LessOrEqual<TInput>(Task<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Task<TInput> value, IComparer<TInput> comparer, string description) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value, comparer or description is null. LessOrEqual<TInput>(Task<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value. public static IAsyncPattern<TInput, TInput> LessOrEqual<TInput>(Task<TInput> value, string description) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or description is null. LessThan<TInput>(Func<Task<TInput>>) Returns a pattern which is matched successfully when the input value is less than the provided value. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Func<Task<TInput>> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider is null. LessThan<TInput>(Func<Task<TInput>>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or comparer is null. LessThan<TInput>(Func<Task<TInput>>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the provided value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Func<Task<TInput>> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider, comparer or description is null. LessThan<TInput>(Func<Task<TInput>>, string) Returns a pattern which is matched successfully when the input value is less than the provided value. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Func<Task<TInput>> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<Task<TInput>> The provider of the value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's MatchAsync(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. If valueProvider returns null, an InvalidOperationException will be thrown. Exceptions ArgumentNullException valueProvider or description is null. LessThan<TInput>(Task<TInput>) Returns a pattern which is matched successfully when the input value is less than the specified value. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Task<TInput> value) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value is null. LessThan<TInput>(Task<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Task<TInput> value, IComparer<TInput> comparer) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or comparer is null. LessThan<TInput>(Task<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the specified value according to the specified comparer. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Task<TInput> value, IComparer<TInput> comparer, string description) Parameters value Task<TInput> The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value, comparer or description is null. LessThan<TInput>(Task<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the specified value. public static IAsyncPattern<TInput, TInput> LessThan<TInput>(Task<TInput> value, string description) where TInput : IComparable<TInput> Parameters value Task<TInput> The value to compare with. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException value or description is null. Not<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>) Returns a pattern which is matched successfully when the specified pattern is not matched successfully. public static IAsyncPattern<TInput, TInput> Not<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to invert. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the specified pattern is not matched successfully. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks This pattern ignores the specified pattern's transformation and returns the input value if matched successfully. Exceptions ArgumentNullException pattern is null. Not<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, string) Returns a pattern which is matched successfully when the specified pattern is not matched successfully. public static IAsyncPattern<TInput, TInput> Not<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult> pattern, string description) Parameters pattern IAsyncPattern<TInput, TMatchResult> The pattern to invert. description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the specified pattern is not matched successfully. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks This pattern ignores the specified pattern's transformation and returns the input value if matched successfully. Exceptions ArgumentNullException pattern or description is null. Null<TInput>() Returns a pattern which is matched successfully when the input value is null. public static IAsyncPattern<TInput, TInput> Null<TInput>() where TInput : class Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Null<TInput>(string) Returns a pattern which is matched successfully when the input value is null. public static IAsyncPattern<TInput, TInput> Null<TInput>(string description) where TInput : class Parameters description string The description of the pattern. Returns IAsyncPattern<TInput, TInput> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. Return<TInput, TValue>(Func<Task<TValue>>) Returns a pattern which always successfully returns the provided value, discarding its input value. public static IAsyncPattern<TInput, TValue> Return<TInput, TValue>(Func<Task<TValue>> valueProvider) Parameters valueProvider Func<Task<TValue>> The provider of the value to return. Returns IAsyncPattern<TInput, TValue> A pattern which always successfully returns the provided value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks This pattern is much like the Any<TInput>() pattern, except it returns the provided value instead of the pattern's input. Exceptions ArgumentNullException valueProvider is null. Return<TInput, TValue>(Func<Task<TValue>>, string) Returns a pattern which always successfully returns the provided value, discarding its input value. public static IAsyncPattern<TInput, TValue> Return<TInput, TValue>(Func<Task<TValue>> valueProvider, string description) Parameters valueProvider Func<Task<TValue>> The provider of the value to return. description string The description of the pattern. Returns IAsyncPattern<TInput, TValue> A pattern which always successfully returns the provided value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. This pattern is much like the Any<TInput>(string) pattern, except it returns the provided value instead of the pattern's input. Exceptions ArgumentNullException valueProvider or description is null. Return<TInput, TValue>(Task<TValue>) Returns a pattern which always successfully returns the specified value, discarding its input value. public static IAsyncPattern<TInput, TValue> Return<TInput, TValue>(Task<TValue> value) Parameters value Task<TValue> The value to return. Returns IAsyncPattern<TInput, TValue> A pattern which always successfully returns the specified value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks This pattern is much like the Any<TInput>() pattern, except it returns the specified value instead of the pattern's input. Return<TInput, TValue>(Task<TValue>, string) Returns a pattern which always successfully returns the specified value, discarding its input value. public static IAsyncPattern<TInput, TValue> Return<TInput, TValue>(Task<TValue> value, string description) Parameters value Task<TValue> The value to return. description string The description of the pattern. Returns IAsyncPattern<TInput, TValue> A pattern which always successfully returns the specified value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks This pattern is much like the Any<TInput>(string) pattern, except it returns the specified value instead of the pattern's input. Exceptions ArgumentNullException description is null. Type<TInput, TType>() Returns a pattern which is matched successfully when the input value is of the specified type. public static IAsyncPattern<TInput, TType> Type<TInput, TType>() where TType : TInput Returns IAsyncPattern<TInput, TType> A pattern which is matched successfully when the input value is of the specified type. Type Parameters TInput The type of the input value of the expression. TType The type to check for. Remarks If the input is null, then this pattern fails only when TType is a non-nullable value type. Type<TInput, TType>(string) Returns a pattern which is matched successfully when the input value is of the specified type. public static IAsyncPattern<TInput, TType> Type<TInput, TType>(string description) where TType : TInput Parameters description string The description of the pattern. Returns IAsyncPattern<TInput, TType> A pattern which is matched successfully when the input value is of the specified type. Type Parameters TInput The type of the input value of the expression. TType The type to check for. Remarks If the input is null, then this pattern fails only when TType is a non-nullable value type. Exceptions ArgumentNullException description is null. ValueNull<TInput>() Returns a pattern which is matched successfully when the input value is null. public static IAsyncPattern<TInput?, TInput?> ValueNull<TInput>() where TInput : struct Returns IAsyncPattern<TInput?, TInput?> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. ValueNull<TInput>(string) Returns a pattern which is matched successfully when the input value is null. public static IAsyncPattern<TInput?, TInput?> ValueNull<TInput>(string description) where TInput : struct Parameters description string The description of the pattern. Returns IAsyncPattern<TInput?, TInput?> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. See Also IAsyncPattern<TInput, TMatchResult> AsyncPattern<TInput, TMatchResult>"
  },
  "api/Matchmaker.Patterns.Async.IAsyncPattern-2.html": {
    "href": "api/Matchmaker.Patterns.Async.IAsyncPattern-2.html",
    "title": "Interface IAsyncPattern<TInput, TMatchResult> | Matchmaker",
    "summary": "Interface IAsyncPattern<TInput, TMatchResult> Namespace Matchmaker.Patterns.Async Assembly Matchmaker.dll Represents a pattern to match with in an asynchronous match expression. public interface IAsyncPattern<in TInput, TMatchResult> Type Parameters TInput The type of the input value of the match expression. TMatchResult The type of the result of this pattern's match. Extension Methods AsyncPatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>) AsyncPatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IAsyncPattern<TInput, TMatchResult>>, string) AsyncPatternExtensions.Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>) AsyncPatternExtensions.Cached<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, string) AsyncPatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>) AsyncPatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, string) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, IAsyncPattern<TIntermediateResult, TMatchResult>, string) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>) AsyncPatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, Task<MatchResult<TMatchResult>>>, string) AsyncPatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) AsyncPatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IAsyncPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>) AsyncPatternExtensions.Where<TInput, TMatchResult>(IAsyncPattern<TInput, TMatchResult>, Func<TMatchResult, Task<bool>>, string) Properties Description Gets the description of this pattern. string Description { get; } Property Value string Remarks Description is not terribly important, but can be used for debugging. The description may never be null. An empty description implies that a pattern doesn't have a description. Methods MatchAsync(TInput) Matches the input with this pattern, and returns a transformed result asynchronously. Task<MatchResult<TMatchResult>> MatchAsync(TInput input) Parameters input TInput The input value to match. Returns Task<MatchResult<TMatchResult>> A successful match result which contains the transformed result of the match, if this match is successful. Otherwise, a failed match result. Remarks Implementations of this method may throw InvalidOperationException if they combine instances of Task or Task<TResult> and one of those instances is null. See Also AsyncPattern<TInput, TMatchResult> AsyncPattern"
  },
  "api/Matchmaker.Patterns.Async.html": {
    "href": "api/Matchmaker.Patterns.Async.html",
    "title": "Namespace Matchmaker.Patterns.Async | Matchmaker",
    "summary": "Namespace Matchmaker.Patterns.Async Classes AsyncPattern Contains factory methods for creating asynchronous patterns. AsyncPattern<TInput, TMatchResult> Represents a base class for asynchronous patterns. Interfaces IAsyncPattern<TInput, TMatchResult> Represents a pattern to match with in an asynchronous match expression."
  },
  "api/Matchmaker.Patterns.IPattern-2.html": {
    "href": "api/Matchmaker.Patterns.IPattern-2.html",
    "title": "Interface IPattern<TInput, TMatchResult> | Matchmaker",
    "summary": "Interface IPattern<TInput, TMatchResult> Namespace Matchmaker.Patterns Assembly Matchmaker.dll Represents a pattern to match with in a match expression. public interface IPattern<in TInput, TMatchResult> Type Parameters TInput The type of the input value of the match expression. TMatchResult The type of the result of this pattern's match. Extension Methods PatternExtensions.AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) PatternExtensions.AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) PatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>) PatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>, string) PatternExtensions.Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) PatternExtensions.Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) PatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>) PatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, string) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>, string) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>, string) PatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) PatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) PatternExtensions.Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) PatternExtensions.Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) Properties Description Gets the description of this pattern. string Description { get; } Property Value string Remarks Description is not terribly important, but can be used for debugging. The description may never be null. An empty description implies that a pattern doesn't have a description. Methods Match(TInput) Matches the input with this pattern, and returns a transformed result. MatchResult<TMatchResult> Match(TInput input) Parameters input TInput The input value to match. Returns MatchResult<TMatchResult> A successful match result which contains the transformed result of the match, if this match is successful. Otherwise, a failed match result. See Also Pattern<TInput, TMatchResult> Pattern PatternExtensions"
  },
  "api/Matchmaker.Patterns.Pattern-2.html": {
    "href": "api/Matchmaker.Patterns.Pattern-2.html",
    "title": "Class Pattern<TInput, TMatchResult> | Matchmaker",
    "summary": "Class Pattern<TInput, TMatchResult> Namespace Matchmaker.Patterns Assembly Matchmaker.dll Represents a base class for patterns. public abstract class Pattern<TInput, TMatchResult> : IPattern<TInput, TMatchResult> Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Inheritance object Pattern<TInput, TMatchResult> Implements IPattern<TInput, TMatchResult> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods PatternExtensions.AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) PatternExtensions.AsAsync<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) PatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>) PatternExtensions.Bind<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, IPattern<TInput, TMatchResult>>, string) PatternExtensions.Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) PatternExtensions.Cached<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) PatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>) PatternExtensions.Cast<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, string) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, IPattern<TIntermediateResult, TMatchResult>, string) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>) PatternExtensions.Pipe<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, MatchResult<TMatchResult>>, string) PatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>) PatternExtensions.Select<TInput, TIntermediateResult, TMatchResult>(IPattern<TInput, TIntermediateResult>, Func<TIntermediateResult, TMatchResult>, string) PatternExtensions.Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>) PatternExtensions.Where<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, Func<TMatchResult, bool>, string) Constructors Pattern() Initializes a new instance of the Pattern<TInput, TMatchResult> class. protected Pattern() Pattern(string) Initializes a new instance of the Pattern<TInput, TMatchResult> class with the specified description. protected Pattern(string description) Parameters description string The description of this pattern. Exceptions ArgumentNullException description is null. Properties Description Gets the description of this pattern. public string Description { get; } Property Value string Methods Match(TInput) Matches the input with this pattern, and returns a transformed result. public abstract MatchResult<TMatchResult> Match(TInput input) Parameters input TInput The input value to match. Returns MatchResult<TMatchResult> A successful match result which contains the transformed result of the match, if this match is successful. Otherwise, a failed match result. ToString() Returns the description of this pattern, if it has one. public override string ToString() Returns string The description of this pattern, if it has one. Otherwise, the name of this pattern's type. See Also IPattern<TInput, TMatchResult> Pattern"
  },
  "api/Matchmaker.Patterns.Pattern.html": {
    "href": "api/Matchmaker.Patterns.Pattern.html",
    "title": "Class Pattern | Matchmaker",
    "summary": "Class Pattern Namespace Matchmaker.Patterns Assembly Matchmaker.dll Contains factory methods for creating patterns. public static class Pattern Inheritance object Pattern Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields DefaultAndDescriptionFormat The default description of the 'and' pattern combinator. public static readonly string DefaultAndDescriptionFormat Field Value string DefaultAnyDescription The default description of the 'any' pattern. public static readonly string DefaultAnyDescription Field Value string DefaultEqualToDescriptionFormat The default description of equality patterns. public static readonly string DefaultEqualToDescriptionFormat Field Value string DefaultGreaterOrEqualDescriptionFormat The default description of greater-or-equal patterns. public static readonly string DefaultGreaterOrEqualDescriptionFormat Field Value string DefaultGreaterThanDescriptionFormat The default description of greater-than patterns. public static readonly string DefaultGreaterThanDescriptionFormat Field Value string DefaultLazyEqualToDescription The default description of lazy equality patterns. public static readonly string DefaultLazyEqualToDescription Field Value string DefaultLazyGreaterOrEqualDescription The default description of lazy greater-or-equal patterns. public static readonly string DefaultLazyGreaterOrEqualDescription Field Value string DefaultLazyGreaterThanDescription The default description of lazy greater-than patterns. public static readonly string DefaultLazyGreaterThanDescription Field Value string DefaultLazyLessOrEqualDescription The default description of lazy less-or-equal patterns. public static readonly string DefaultLazyLessOrEqualDescription Field Value string DefaultLazyLessThanDescription The default description of lazy less-than patterns. public static readonly string DefaultLazyLessThanDescription Field Value string DefaultLazyReturnDescription The default description of the lazy 'return' pattern. public static readonly string DefaultLazyReturnDescription Field Value string DefaultLessOrEqualDescriptionFormat The default description of less-or-equal patterns. public static readonly string DefaultLessOrEqualDescriptionFormat Field Value string DefaultLessThanDescriptionFormat The default description of less-than patterns. public static readonly string DefaultLessThanDescriptionFormat Field Value string DefaultNotDescriptionFormat The default description of the 'not' pattern combinators. public static readonly string DefaultNotDescriptionFormat Field Value string DefaultNullDescription The default description of 'null' patterns. public static readonly string DefaultNullDescription Field Value string DefaultOrDescriptionFormat The default description of the 'or' pattern combinator. public static readonly string DefaultOrDescriptionFormat Field Value string DefaultPipeDescriptionFormat The default description of piping patterns. public static readonly string DefaultPipeDescriptionFormat Field Value string DefaultReturnDescriptionFormat The default description of the 'return' pattern. public static readonly string DefaultReturnDescriptionFormat Field Value string DefaultTypeDescriptionFormat The default description of type patterns. public static readonly string DefaultTypeDescriptionFormat Field Value string DefaultXorDescriptionFormat The default description of the 'xor' pattern combinator. public static readonly string DefaultXorDescriptionFormat Field Value string Methods Any<TInput>() Returns a pattern which is always matched successfully. public static IPattern<TInput, TInput> Any<TInput>() Returns IPattern<TInput, TInput> A pattern which is always matched successfully. Type Parameters TInput The type of the input value of the expression. Remarks This pattern should be used as the default case of a match expression, if one is needed. Any<TInput>(string) Returns a pattern which is always matched successfully. public static IPattern<TInput, TInput> Any<TInput>(string description) Parameters description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is always matched successfully. Type Parameters TInput The type of the input value of the expression. Remarks This pattern should be used as the default case of a match expression, if one is needed. Exceptions ArgumentNullException description is null. CreatePattern<TInput>(Func<TInput, bool>) Creates a pattern which uses a specified predicate to match its inputs. public static IPattern<TInput, TInput> CreatePattern<TInput>(Func<TInput, bool> predicate) Parameters predicate Func<TInput, bool> The predicate which matches the inputs. Returns IPattern<TInput, TInput> A pattern which matches its inputs according to the specified predicate. Type Parameters TInput The type of the pattern's inputs. Exceptions ArgumentNullException predicate is null. CreatePattern<TInput>(Func<TInput, bool>, string) Creates a pattern which uses a specified predicate to match its inputs and has a specified description. public static IPattern<TInput, TInput> CreatePattern<TInput>(Func<TInput, bool> predicate, string description) Parameters predicate Func<TInput, bool> The predicate which matches the inputs. description string The pattern's description. Returns IPattern<TInput, TInput> A pattern which matches its inputs according to the specified predicate. Type Parameters TInput The type of the pattern's inputs. Exceptions ArgumentNullException predicate or description is null. CreatePattern<TInput, TMatchResult>(Func<TInput, MatchResult<TMatchResult>>) Creates a pattern which uses a specified function to match its inputs. public static IPattern<TInput, TMatchResult> CreatePattern<TInput, TMatchResult>(Func<TInput, MatchResult<TMatchResult>> matcher) Parameters matcher Func<TInput, MatchResult<TMatchResult>> The function which matches the inputs. Returns IPattern<TInput, TMatchResult> A pattern which matches its inputs according to the specified matcher function. Type Parameters TInput The type of the pattern's inputs. TMatchResult The type of the pattern's results. Exceptions ArgumentNullException matcher is null. CreatePattern<TInput, TMatchResult>(Func<TInput, MatchResult<TMatchResult>>, string) Creates a pattern which uses a specified function to match its inputs and has a specified description. public static IPattern<TInput, TMatchResult> CreatePattern<TInput, TMatchResult>(Func<TInput, MatchResult<TMatchResult>> matcher, string description) Parameters matcher Func<TInput, MatchResult<TMatchResult>> The function which matches the inputs. description string The pattern's description. Returns IPattern<TInput, TMatchResult> A pattern which matches its inputs according to the specified matcher function. Type Parameters TInput The type of the pattern's inputs. TMatchResult The type of the pattern's results. Exceptions ArgumentNullException matcher or description is null. EqualTo<TInput>(Func<TInput>) Returns a pattern which is matched successfully when the input value is equal to the provided value. public static IPattern<TInput, TInput> EqualTo<TInput>(Func<TInput> valueProvider) Parameters valueProvider Func<TInput> The provider of the value to check for equality. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException valueProvider is null. EqualTo<TInput>(Func<TInput>, IEqualityComparer<TInput>) Returns a pattern which is matched successfully when the input value is equal to the provided value according to the specified equality comparer. public static IPattern<TInput, TInput> EqualTo<TInput>(Func<TInput> valueProvider, IEqualityComparer<TInput> comparer) Parameters valueProvider Func<TInput> The provider of the value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or comparer is null. EqualTo<TInput>(Func<TInput>, IEqualityComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the provided value according to the specified equality comparer. public static IPattern<TInput, TInput> EqualTo<TInput>(Func<TInput> valueProvider, IEqualityComparer<TInput> comparer, string description) Parameters valueProvider Func<TInput> The provider of the value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider, comparer or description is null. EqualTo<TInput>(Func<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the provided value. public static IPattern<TInput, TInput> EqualTo<TInput>(Func<TInput> valueProvider, string description) Parameters valueProvider Func<TInput> The provider of the value to check for equality. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or description is null. EqualTo<TInput>(TInput) Returns a pattern which is matched successfully when the input value is equal to the specified value. public static IPattern<TInput, TInput> EqualTo<TInput>(TInput value) Parameters value TInput The value to check for equality. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. EqualTo<TInput>(TInput, IEqualityComparer<TInput>) Returns a pattern which is matched successfully when the input value is equal to the specified value according to the specified equality comparer. public static IPattern<TInput, TInput> EqualTo<TInput>(TInput value, IEqualityComparer<TInput> comparer) Parameters value TInput The value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer is null. EqualTo<TInput>(TInput, IEqualityComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is equal to the specified value according to the specified equality comparer. public static IPattern<TInput, TInput> EqualTo<TInput>(TInput value, IEqualityComparer<TInput> comparer, string description) Parameters value TInput The value to check for equality. comparer IEqualityComparer<TInput> The equality comparer to use for checking equality. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer or description is null. EqualTo<TInput>(TInput, string) Returns a pattern which is matched successfully when the input value is equal to the specified value. public static IPattern<TInput, TInput> EqualTo<TInput>(TInput value, string description) Parameters value TInput The value to check for equality. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. GreaterOrEqual<TInput>(Func<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<TInput> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider is null. GreaterOrEqual<TInput>(Func<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value according to the specified comparer. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or comparer is null. GreaterOrEqual<TInput>(Func<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value according to the specified comparer. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider, comparer or description is null. GreaterOrEqual<TInput>(Func<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the provided value. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(Func<TInput> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or description is null. GreaterOrEqual<TInput>(TInput) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(TInput value) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. GreaterOrEqual<TInput>(TInput, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value according to the specified comparer. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(TInput value, IComparer<TInput> comparer) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer is null. GreaterOrEqual<TInput>(TInput, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value according to the specified comparer. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(TInput value, IComparer<TInput> comparer, string description) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer or description is null. GreaterOrEqual<TInput>(TInput, string) Returns a pattern which is matched successfully when the input value is greater than or equal to the specified value. public static IPattern<TInput, TInput> GreaterOrEqual<TInput>(TInput value, string description) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. GreaterThan<TInput>(Func<TInput>) Returns a pattern which is matched successfully when the input value is greater than the provided value. public static IPattern<TInput, TInput> GreaterThan<TInput>(Func<TInput> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider is null. GreaterThan<TInput>(Func<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than the provided value according to the specified comparer. public static IPattern<TInput, TInput> GreaterThan<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or comparer is null. GreaterThan<TInput>(Func<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the provided value according to the specified comparer. public static IPattern<TInput, TInput> GreaterThan<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider, comparer or description is null. GreaterThan<TInput>(Func<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the provided value. public static IPattern<TInput, TInput> GreaterThan<TInput>(Func<TInput> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or description is null. GreaterThan<TInput>(TInput) Returns a pattern which is matched successfully when the input value is greater than the specified value. public static IPattern<TInput, TInput> GreaterThan<TInput>(TInput value) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. GreaterThan<TInput>(TInput, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is greater than the specified value according to the specified comparer. public static IPattern<TInput, TInput> GreaterThan<TInput>(TInput value, IComparer<TInput> comparer) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer is null. GreaterThan<TInput>(TInput, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is greater than the specified value according to the specified comparer. public static IPattern<TInput, TInput> GreaterThan<TInput>(TInput value, IComparer<TInput> comparer, string description) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer or description is null. GreaterThan<TInput>(TInput, string) Returns a pattern which is matched successfully when the input value is greater than the specified value. public static IPattern<TInput, TInput> GreaterThan<TInput>(TInput value, string description) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is greater than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. LessOrEqual<TInput>(Func<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value. public static IPattern<TInput, TInput> LessOrEqual<TInput>(Func<TInput> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider is null. LessOrEqual<TInput>(Func<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value according to the specified comparer. public static IPattern<TInput, TInput> LessOrEqual<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or comparer is null. LessOrEqual<TInput>(Func<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value according to the specified comparer. public static IPattern<TInput, TInput> LessOrEqual<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider, comparer or description is null. LessOrEqual<TInput>(Func<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the provided value. public static IPattern<TInput, TInput> LessOrEqual<TInput>(Func<TInput> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or description is null. LessOrEqual<TInput>(TInput) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value. public static IPattern<TInput, TInput> LessOrEqual<TInput>(TInput value) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. LessOrEqual<TInput>(TInput, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value according to the specified comparer. public static IPattern<TInput, TInput> LessOrEqual<TInput>(TInput value, IComparer<TInput> comparer) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer is null. LessOrEqual<TInput>(TInput, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value according to the specified comparer. public static IPattern<TInput, TInput> LessOrEqual<TInput>(TInput value, IComparer<TInput> comparer, string description) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer or description is null. LessOrEqual<TInput>(TInput, string) Returns a pattern which is matched successfully when the input value is less than or equal to the specified value. public static IPattern<TInput, TInput> LessOrEqual<TInput>(TInput value, string description) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than or equal to the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. LessThan<TInput>(Func<TInput>) Returns a pattern which is matched successfully when the input value is less than the provided value. public static IPattern<TInput, TInput> LessThan<TInput>(Func<TInput> valueProvider) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider is null. LessThan<TInput>(Func<TInput>, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than the provided value according to the specified comparer. public static IPattern<TInput, TInput> LessThan<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or comparer is null. LessThan<TInput>(Func<TInput>, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the provided value according to the specified comparer. public static IPattern<TInput, TInput> LessThan<TInput>(Func<TInput> valueProvider, IComparer<TInput> comparer, string description) Parameters valueProvider Func<TInput> The provider of the value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider, comparer or description is null. LessThan<TInput>(Func<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the provided value. public static IPattern<TInput, TInput> LessThan<TInput>(Func<TInput> valueProvider, string description) where TInput : IComparable<TInput> Parameters valueProvider Func<TInput> The provider of the value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the provided value. Type Parameters TInput The type of the input value of the expression. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. Exceptions ArgumentNullException valueProvider or description is null. LessThan<TInput>(TInput) Returns a pattern which is matched successfully when the input value is less than the specified value. public static IPattern<TInput, TInput> LessThan<TInput>(TInput value) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. LessThan<TInput>(TInput, IComparer<TInput>) Returns a pattern which is matched successfully when the input value is less than the specified value according to the specified comparer. public static IPattern<TInput, TInput> LessThan<TInput>(TInput value, IComparer<TInput> comparer) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer is null. LessThan<TInput>(TInput, IComparer<TInput>, string) Returns a pattern which is matched successfully when the input value is less than the specified value according to the specified comparer. public static IPattern<TInput, TInput> LessThan<TInput>(TInput value, IComparer<TInput> comparer, string description) Parameters value TInput The value to compare with. comparer IComparer<TInput> The comparer to use for comparison. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException comparer or description is null. LessThan<TInput>(TInput, string) Returns a pattern which is matched successfully when the input value is less than the specified value. public static IPattern<TInput, TInput> LessThan<TInput>(TInput value, string description) where TInput : IComparable<TInput> Parameters value TInput The value to compare with. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is less than the specified value. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. Not<TInput, TMatchResult>(IPattern<TInput, TMatchResult>) Returns a pattern which is matched successfully when the specified pattern is not matched successfully. public static IPattern<TInput, TInput> Not<TInput, TMatchResult>(IPattern<TInput, TMatchResult> pattern) Parameters pattern IPattern<TInput, TMatchResult> The pattern to invert. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the specified pattern is not matched successfully. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks This pattern ignores the specified pattern's transformation and returns the input value if matched successfully. Exceptions ArgumentNullException pattern is null. Not<TInput, TMatchResult>(IPattern<TInput, TMatchResult>, string) Returns a pattern which is matched successfully when the specified pattern is not matched successfully. public static IPattern<TInput, TInput> Not<TInput, TMatchResult>(IPattern<TInput, TMatchResult> pattern, string description) Parameters pattern IPattern<TInput, TMatchResult> The pattern to invert. description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the specified pattern is not matched successfully. Type Parameters TInput The type of the input value of the expression. TMatchResult The type of the result of this pattern's match. Remarks This pattern ignores the specified pattern's transformation and returns the input value if matched successfully. Exceptions ArgumentNullException pattern or description is null. Null<TInput>() Returns a pattern which is matched successfully when the input value is null. public static IPattern<TInput, TInput> Null<TInput>() where TInput : class Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Null<TInput>(string) Returns a pattern which is matched successfully when the input value is null. public static IPattern<TInput, TInput> Null<TInput>(string description) where TInput : class Parameters description string The description of the pattern. Returns IPattern<TInput, TInput> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. Return<TInput, TValue>(Func<TValue>) Returns a pattern which always successfully returns the provided value, discarding its input value. public static IPattern<TInput, TValue> Return<TInput, TValue>(Func<TValue> valueProvider) Parameters valueProvider Func<TValue> The provider of the value to return. Returns IPattern<TInput, TValue> A pattern which always successfully returns the provided value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. This pattern is much like the Any<TInput>(string) pattern, except it returns the provided value instead of the pattern's input. Exceptions ArgumentNullException valueProvider is null. Return<TInput, TValue>(Func<TValue>, string) Returns a pattern which always successfully returns the provided value, discarding its input value. public static IPattern<TInput, TValue> Return<TInput, TValue>(Func<TValue> valueProvider, string description) Parameters valueProvider Func<TValue> The provider of the value to return. description string The description of the pattern. Returns IPattern<TInput, TValue> A pattern which always successfully returns the provided value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks The valueProvider is not called until this pattern's Match(TInput) method is called. The valueProvider will be memoized, so it will be called once, and then its result will be cached. The caching process is not thread-safe, so there is a chance that the valueProvider can be called more than once. This pattern is much like the Any<TInput>(string) pattern, except it returns the provided value instead of the pattern's input. Exceptions ArgumentNullException valueProvider or description is null. Return<TInput, TValue>(TValue) Returns a pattern which always successfully returns the specified value, discarding its input value. public static IPattern<TInput, TValue> Return<TInput, TValue>(TValue value) Parameters value TValue The value to return. Returns IPattern<TInput, TValue> A pattern which always successfully returns the specified value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks This pattern is much like the Any<TInput>() pattern, except it returns the specified value instead of the pattern's input. Return<TInput, TValue>(TValue, string) Returns a pattern which always successfully returns the specified value, discarding its input value. public static IPattern<TInput, TValue> Return<TInput, TValue>(TValue value, string description) Parameters value TValue The value to return. description string The description of the pattern. Returns IPattern<TInput, TValue> A pattern which always successfully returns the specified value. Type Parameters TInput The type of the input value of the expression. TValue The type of the value to return. Remarks This pattern is much like the Any<TInput>(string) pattern, except it returns the specified value instead of the pattern's input. Exceptions ArgumentNullException description is null. Type<TInput, TType>() Returns a pattern which is matched successfully when the input value is of the specified type. public static IPattern<TInput, TType> Type<TInput, TType>() where TType : TInput Returns IPattern<TInput, TType> A pattern which is matched successfully when the input value is of the specified type. Type Parameters TInput The type of the input value of the expression. TType The type to check for. Remarks If the input is null, then this pattern fails only when TType is a non-nullable value type. Type<TInput, TType>(string) Returns a pattern which is matched successfully when the input value is of the specified type. public static IPattern<TInput, TType> Type<TInput, TType>(string description) where TType : TInput Parameters description string The description of the pattern. Returns IPattern<TInput, TType> A pattern which is matched successfully when the input value is of the specified type. Type Parameters TInput The type of the input value of the expression. TType The type to check for. Remarks If the input is null, then this pattern fails only when TType is a non-nullable value type. Exceptions ArgumentNullException description is null. ValueNull<TInput>() Returns a pattern which is matched successfully when the input value is null. public static IPattern<TInput?, TInput?> ValueNull<TInput>() where TInput : struct Returns IPattern<TInput?, TInput?> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. ValueNull<TInput>(string) Returns a pattern which is matched successfully when the input value is null. public static IPattern<TInput?, TInput?> ValueNull<TInput>(string description) where TInput : struct Parameters description string The description of the pattern. Returns IPattern<TInput?, TInput?> A pattern which is matched successfully when the input value is null. Type Parameters TInput The type of the input value of the expression. Exceptions ArgumentNullException description is null. See Also IPattern<TInput, TMatchResult> Pattern<TInput, TMatchResult>"
  },
  "api/Matchmaker.Patterns.PatternComposition.html": {
    "href": "api/Matchmaker.Patterns.PatternComposition.html",
    "title": "Enum PatternComposition | Matchmaker",
    "summary": "Enum PatternComposition Namespace Matchmaker.Patterns Assembly Matchmaker.dll Represnts types of pattern composition. public enum PatternComposition Fields And = 0 Represents the 'and' composition - the result is successful only when both results are successful. Or = 1 Represents the 'or' composition - the result is successful when either of the results is successful. Xor = 2 Represents the 'xor' composition - the result is successful when only one of the results is successful. See Also PatternExtensions AsyncPatternExtensions"
  },
  "api/Matchmaker.Patterns.html": {
    "href": "api/Matchmaker.Patterns.html",
    "title": "Namespace Matchmaker.Patterns | Matchmaker",
    "summary": "Namespace Matchmaker.Patterns Classes Pattern Contains factory methods for creating patterns. Pattern<TInput, TMatchResult> Represents a base class for patterns. Interfaces IPattern<TInput, TMatchResult> Represents a pattern to match with in a match expression. Enums PatternComposition Represnts types of pattern composition."
  },
  "api/Matchmaker.html": {
    "href": "api/Matchmaker.html",
    "title": "Namespace Matchmaker | Matchmaker",
    "summary": "Namespace Matchmaker Classes AsyncMatch A static class which is used to create asynchronous match expressions. AsyncMatchBuilder<TInput> Represents an asynchronous match statement builder. AsyncMatchBuilder<TInput, TOutput> Represents an asynchronous match expression builder. AsyncMatch<TInput> Represents an asynchronous match statement - a match expression that doesn't yield a value. AsyncMatch<TInput, TOutput> Represents an asynchronous match expression. Match A static class which is used to create match expressions. MatchBuilder<TInput> Represents a match statement builder. MatchBuilder<TInput, TOutput> Represents a match expression builder. MatchException Represents an exception which is thrown when a match expression hasn't found a successful pattern. MatchResult A static class which is used to create match results. Match<TInput> Represents a match statement - a match expression that doesn't yield a value. Match<TInput, TOutput> Represents a match expression. Structs MatchResult<T> Represents the result of a pattern match."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Matchmaker API | Matchmaker",
    "summary": "Matchmaker API This section contains API docs for the Matchmaker package. Use the sidebar to navigate the API documentation."
  },
  "articles/async.html": {
    "href": "articles/async.html",
    "title": "Asynchronous Pattern Matching | Matchmaker",
    "summary": "Asynchronous Pattern Matching Starting with version 3.0, asynchronous pattern matching is also available. Important On .NET Standard 2.0, Matchmaker uses Microsoft.Bcl.AsyncInterfaces as the polyfill for asynchronous interfaces. Async Patterns Async patterns are objects which implement the Matchmaker.Patterns.Async.IAsyncPattern<TInput, TMatchResult> interface. They are very similar to normal patterns, except they are matched asynchronously. The interface contains two members: string Description { get; } Task<MatchResult<TMatchResult>> MatchAsync(Tinput input); The predefined patterns (contained in the Matchmaker.Patterns.Async.AsyncPattern class) and extension methods from MatchMaker.Linq are basically the same. There are also extensions for Task<MatchResult<TMatchResult>>. The only difference is that the Cached extension method returns a pattern which caches its inputs in a thread-safe manner. Creating custom async patterns is also basically the same as creating custom patterns: you can use the CreatePattern methods from the AsyncPattern class, extend the Matchmaker.Patterns.Async.AsyncPattern<TInput, TMatchResult> class to get the Description property for free, or implement the IAsyncPattern<TInput, TMatchResult> directly. Normal patterns can be turned into async patterns by calling the AsAsync() extension (defined in the Matchmaker.Linq namespace). Async Match Expressions Async match expressions are also very similar to normal match expressions. There are two types of async match expressions: AsyncMatch<TInput, TOutput> which yields a result and AsyncMatch<TInput> which doesn't. They can be created using methods in the AsyncMatch class. The Case methods of async match expressions are overloaded to take either async patterns or normal patterns (which are turned into async patterns using the AsAsync() extension) and to take either async or sync actions to executed when a pattern is matched successfully (sync actions are turned into async actions). Async match expressions can be executed using the ExecuteAsync, ExecuteNonStrictAsync and ExecuteWithFallthroughAsync methods. The ToFunction method and its variations are also available. ExecuteWithFallthroughAsync returns an IAsyncEnumerable which enable lazy async execution of match expressions. The Matchmaker.Linq namespace contains the EnumerateAsync extension method for IAsyncEnumerable<T> which enumerates it and ignores the result. You can use it if you just want to execute the match statement with fall-through. Static async match expressions are also available. Use the AsyncMatch.CreateStatic methods to create them, just like normal match expressions. The methods accept an action on either AsyncMatchBuilder<TInput, TOutput> or AsyncMatchBuilder<TInput>. Static match expressions are globally cached and the caching process is thread-safe. Caches can be cleared with the ClearCache methods in AsyncMatch."
  },
  "articles/expressions.html": {
    "href": "articles/expressions.html",
    "title": "Match Expressions | Matchmaker",
    "summary": "Match Expressions The second central idea is the match expression itself. It is represented by two classes: Match<TInput, TOutput> and Match<TInput>. The difference between them is that the former represents a match expression which yields a result, and the latter represents a match expression which doesn't yield a result (also known as a match statement). Using Match Expressions Creating Match Expressions A match expression can be created using the Create methods of the static class Match. Adding Cases The Match classes include Case methods which are used to add a pattern and a function which is executed if the match is successful. Match expressions are immutable – Case methods return new match expressions; they do not affect the ones on which they are called. Case methods are generic – they also contain information about the pattern's transformation type. Match expressions can contain patterns of arbitrary transformation types without knowing about these types. Executing Match Expressions To execute a match expression, the ExecuteOn method is used. It takes the input value to match. There are two modes of execution in match expressions: strict and non-strict. The strict mode throws an exception if no matches were found, and the non-strict doesn't. In the Match<TInput, TOutput> class, the ExecuteOn method returns the result of the match or throws a MatchException if no successful match was found. Match<TInput, TOutput> also contains the ExecuteNonStrict method which executes the match expression in the non-strict mode. It returns MatchResult<TOutput> because the result might not be present. In the Match<TInput> class, the ExecuteOn method doesn't return anything, and also throws a MatchException if the match wasn't successful. This class also contains the ExecuteNonStrict method – it returns a boolean value which indicates whether the match was successful and doesn't throw an exception if it wasn't. The ToFunction method and its variations are also available. They return a function which, when called, will execute the match expression. Matching with Fall-through C, C++ and, Java support fall-through in switch statements. So does this library, although it works differently here. Fall-through must be explicitly enabled for cases and then explicitly enabled during execution. Both Match classes contain the ExecuteWithFallthrough method which takes fall-through behavior into account. ExecuteOn and ExecuteStrict ignore the fall-through behavior. If a case has fall-through enabled, then the expression falls to the next successful match, unlike switch, which falls to the next case whether it's successful or not. The Case methods are overloaded to accept a boolean value which indicates the fall-through behavior. If fall-through is enabled for a pattern, then the expression will continue searching for the next successful pattern. If it isn't, then the expression will stop at this pattern and not go any further. Match.Create is also overloaded to take the default fall-through behavior. Matching with fall-through is lazy i.e. it returns an IEnumerable and is only executed when this enumerable is enumerated. Because matching will fall-through is lazy, it doesn't have any modes of execution – the user must decide whether to throw an exception or not if there were no successful matches. In the Match<TInput, TOutput> class, the ExecuteWithFallthrough method returns an IEnumerable<TOutput> which can be used to get all successful match results. In the Match<TInput> class there are no results, so the ExecuteWithFallthrough method returns an IEnumerable<object> which should be used simply to enumerate the match process itself. This is implemented so that matching with fall-through is also lazy in this class. The values of the resulting enumerable don't matter - in fact, they are always null, because match statements don't produce any results. What matters is the process of enumeration. You can use the LINQ's Take method to limit the number of executed matches, or the Count method to execute it and get the number of successful matches. The Matchmaker.Linq namespace contains the Enumerate extension method for IEnumerable<T> which enumerates it and ignores the result. You can use it if you just want to execute the match statement with fall-through. Important Matching with fall-through is lazy and is actually executed when the result is enumerated. Here's a (somewhat convoluted) implementation of the famous fizz-buzz program which uses matching with fall-through: using System.Linq; using Matchmaker; using Matchmaker.Linq; using static Matchmaker.Patterns.Pattern; // ... IPattern<int, int> DivisibleBy(int n) => CreatePattern<int>(input => input % n == 0); var result = Enumerable.Range(0, 15) .Select(Match.Create<int, string>(fallthroughByDefault: true) .Case(DivisibleBy(3), _ => \"Fizz\") .Case(DivisibleBy(5), _ => \"Buzz\") .Case(Not(DivisibleBy(3).Or(DivisibleBy(5))), n => n.ToString()) .ToFunctionWithFallthrough()) .Select(items => items.Aggregate(String.Concat)) .ToList(); // The result is: // \"FizzBuzz\", \"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\" Static Match Expressions The Initialization Problem One pain point of match expressions is that whenever a method which contains a match expression is executed, the match expression is initialized from scratch. Take a look at this example: void DoStuff(int i) => Match.Create<int, string>() .Case(...) .Case(...) .Case(...) .Case(...) .ExecuteOn(i); The problem here is that if we call DoStuff 10,000 times, we will initialize the match expression 10,000 times as well, even though it's actually the same expression. Having just 4 cases may not seem like much, but the lag does accumulate if we execute it thousands of times. We can save the expression in a field and then call the ExecuteOn method on this field. But this makes the code much less readable because the case definitions are in a different place from the actual execution point. The Solution There is a way to create static match expressions – expressions which will be initialized only once. The Match class contains the CreateStatic methods which allow the creation of static match expressions. Take a look at the modified example: void DoStuff(int i) => Match.CreateStatic<int, string>(builder => builder .Case(...) .Case(...) .Case(...) .Case(...)) .ExecuteOn(i); It looks almost the same, except for one difference: the calls to Case methods are inside the lambda expression, called the build action, which is passed to the CreateStatic method. Now this match expression will be initialized only once, and its initialization code is in the same place as its execution point. The parameter of the build action has the type MatchBuilder<TInput, TOutput or MatchBuilder<TInput>, depending on which type of match expressions you are building. This type has the same methods for adding cases as the Match classes and is mutable – the methods return the same builder instance. MatchBuilder also has the Fallthrough method which specifies the default fall-through behavior. But this method specifies fall-through behavior only for cases that are defined after it. For example: builder .Fallthrough(true) .Case(...) // this case has fall-through behavior if not specified otherwise .Case(...) // this case also has fall-through behavior if not specified otherwise .Fallthrough(false) .Case(...) // this case doesn't have fall-through behavior if not specified otherwise .Case(...) // this case also doesn't have fall-through behavior if not specified otherwise Every case can configure its fall-through behavior individually as well. Caching Match Expressions The build action will be called only once, and its result will be cached. The cache is a static hash-table. The caching process is not thread-safe. The key of the cache is the place where the CreateStatic method is called. Apart from the build action, this method also accepts two caller info arguments: the path to the source file and the line in the source file. Users don't need to pass these arguments to the method as they have the CallerFilePath and CallerLineNumber attributes. The Match class also contains the ClearCache methods which clear a global cache. Match expressions have a cache per type (so Match<int, int> uses a different cache than Match<int, string>) so ClearCache only clears one cache. Clearing the cache will force all static match expressions of that type to be reinitialized. This process is not thread-safe as well."
  },
  "articles/migration.html": {
    "href": "articles/migration.html",
    "title": "Migration Guide | Matchmaker",
    "summary": "Migration Guide This article describes how to migrate to version 2.0.0 from PatternMatching v1.2.0. If you need to migrate from older versions, first migrate to version 1.2.0. You can do that just by reading the changelog, because previous versions contained much fewer changes and it's much simpler to migrate. In order to migrate from version 2.0.0 to version 2.1.0 action is required only if you implemented the IPattern<TInput, TMatchResult> interface (which wasn't recommended). The less generic IPattern<TInput> interface was removed, so you should remove its Match method. That's it. No changes are required to migrate from version 2.1.0 to 3.1.0. Version 3.0.0 removed support for .NET Standard 2.0, but version 3.1.0 added it back, effectively undoing the only breaking change of 3.0.0. General Since this library has a new name, the namespace is different as well. Instead of the PatternMatching namespace there are three namespaces: Matchmaker, Matchmaker.Patterns and Matchmaker.Linq. The dependency on language-ext was dropped. Instead of using OptionUnsafe this library now uses its own MatchResult. Patterns The predefined patterns haven't changed much, but the way to create custom patterns changed drastically. The Match method in IPattern<TInput, TMatchResult> now returns MatchResult<TMatchResult> instead of OptionUnsafe<TMatchResult>. The IPattern<TInput, TMatchResult> now contains the Description property. If you implemented this interface, you must add it and make it return an empty string if you don't want a description. IPattern<TInput, TMatchResult> now extends IPattern<TInput>. If you implemented this interface, it's better to extend the new Pattern<TInput, TMatchResult> class instead, as it provides both an implementation of the less generic interface, and the Description property. Bear in mind that IPattern<TInput> was removed in version 2.1.0 so don't bother with it much. The ConditionalPattern<TInput, TMatchResult, TPattern> is gone. It's too much work for the users to implement filtering of patterns if they want a highly customized pattern. If you filtered pattern results with the When method before, now you can do that using the Where extension method from the Matchmaker.Linq namespace, which works on all patterns, and doesn't need a special base class. I renamed this method because previously I wanted it to look like the when clause of the switch expressions, but now this method is part of LINQ to Patterns, so Where is more appropriate. SimplePattern<TInput> is gone and Pattern<TInput, TMatchResult> now serves as a base class for patterns. If you need to create a pattern from a function or a predicate, use the CreatePattern methods in the Pattern class. Since SimplePattern<TInput> is gone, you cannot use operators to compose patterns (&, | and ^). Also, the And, Or and Xor methods are not part of pattern definition - they are extension methods from the Matchmaker.Linq namespace. The ~ operator is gone as well. Use Not instead. The StructNull pattern is gone. It was deprecated in version 1.2.0. The ValueNull pattern provides the same functionality. Match Expressions The default mode of execution for match statements is now strict. So ExecuteOn is strict. The ExecuteStrict method is gone and ExecuteNonStrict was added. This was changed because it was unintuitive to have different default modes in match expressions and match statements. Matching with fall-through became lazy. This is major change. The result in match expressions is now not an Lst from language-ext, but a lazy IEnumerable which the user has to enumerate for the match to actually be executed. Match statements also return an IEnumerable instead of a number of successful cases. If you want to know the number of successful cases, you can call Count() on the result of the match. Or you can call Enumerate from Matchmaker.Linq if you just want to execute it. Since matching with fall-though is lazy, it doesn't have modes of execution - it's just non-strict. The library cannot decide to throw an exception if there are no successful cases because the library doesn't decide when to execute the expression."
  },
  "articles/nullable.html": {
    "href": "articles/nullable.html",
    "title": "Nullable Reference Types | Matchmaker",
    "summary": "Nullable Reference Types Starting with version 3.0, support for nullable reference types (NRTs) is enabled. Support for NRTs is limited in this library because it uses generics extensively, and generics don't play nicely with NRTs. Note On .NET Standard 2.0, support for NRTs is even more limited, since attributes for null-state static analysis are not available, and Matchmaker simply elides them on this TFM instead of using a polyfill. Since match expressions can work will null, their return types are marked as such. Match results may also contain null values. This may be inconvenient if you know that null values are not used as match results. In addition, extensions in Matchmaker.Linq also don't fully support NRTs. Look at the (simplified) implementation of the Select extension for match results: public static MatchResult<TResult> Select<T, TResult>(this MatchResult<T> result, Func<T, TResult> mapper) => result.IsSuccessful ? MatchResult.Success(mapper(result.Value!)) : MatchResult.Failure<TResult>(); Here's the interesting part: mapper(result.Value!). There is no way to tell C# that mapper can receive null inputs, because T is generic and we cannot use T?. Since extensions for patterns use extensions for match results, this also applies to extensions for patterns. There is no way to tell C# that functions passed to those extensions can receive null, but they can, and this should be accounted for. When using this library with NRTs enabled, remember two things: MatchResult<T> may contain null and so patterns can return null as their results as well Match expressions' results may be null"
  },
  "articles/patterns.html": {
    "href": "articles/patterns.html",
    "title": "Patterns | Matchmaker",
    "summary": "Patterns One of two central ideas of this library is a pattern. Patterns are used to match the input value against a certain 'shape'. For example, 'the input value is equal to some value' or 'the input value has some type'. The IPattern<TInput, TMatchResult> interface A pattern is an object which implements the Matchmaker.Patterns.IPattern<TInput, TMatchResult> interface. This interface contains two members: string Description { get; } MatchResult<TMatchResult> Match(Tinput input); The Match method actually does two things: Matches the input value with the pattern and returns a successful result if the match is successful. Transforms the input value. The returned result contains the transformed value if it's successful. Since options are not supported natively in C#, a custom type – MatchResult<T> – is used. The definition of patterns is similar to F#'s active patterns. Descriptions for patterns are not terribly important, but can be useful for debugging. As such, they are optional – if you don't want a pattern to have a description, it should be empty. A pattern's description should never be null. Null Values The results of patterns' matching can be null. This is why the MatchResult<T> type can contain a null value. Using Predefined Patterns There are several predefined patterns in the Matchmaker.Patterns.Pattern class: Any is always matched successfully and returns its input. Return is also always matched successfully but returns the specified value instead of its input. Null is matched successfully if its input is null. ValueNull is also matched successfully if its input is null, but is used for nullable value types. EqualTo is matched successfully if its input is equal to the specified value. LessThan, LessOrEqual, GreaterThan and GreaterOrEqual are matched successfully if their input is compared successfully to the specified value. Type is matched successfully if its input has the specified type. It returns its input as a value of that type. If the input is null, then the match will fail only if the destination type is a non-nullable value type. Not is matched successfully if the specified pattern is not matched successfully. It ignores the specified pattern's transformation and returns its input if matched successfully. The patterns which compare their inputs can also take a custom comparer which will be used to compare values. The patterns that take a value can also take a value provider (a function which returns the value) in order to lazily match the input. The value provider will be called once upon the first call to the Match method and then its result will be cached. Note that the caching process is not thread-safe. All methods for getting predefined patterns are overloaded to take a custom description. LINQ to Patterns The Matchmaker.Linq namespace provides several extension methods for patterns: Select maps a pattern's result value if it's successful. Pipe creates a pattern pipeline – the result of the first pattern is the input of the second pattern. Cast casts a pattern's result to a specified type. It's the same as piping a pattern to the Type pattern. If the input is null, then the match will fail only if the destination type is a non-nullable value type. Bind flat-maps a pattern's result. If a pattern's result is successful, it calls the specified function and passes the result to it. The function returns another pattern which is then used to match the input. The second pattern's result is the final result. Where filters the pattern's result if it's successful. And, Or and Xor compose two patterns. The resulting pattern ignores the patterns' transformations and returns the input if successful. Compose is the same as the three methods above, but the composition operator is passed to it as well. Cached returns a pattern which matches the same as the specified pattern but caches its results in a null-safe hash table. Every input will be matched only once – if it's matched again, the result will be taken from the cache. The caching process is not thread-safe. All extension methods for patterns are overloaded to take a custom description. Since there are the Select and Where extensions on patterns, you can write them using C#'s query syntax. Patterns have the Bind and Return functions, so they are monads. To be more specific, patterns can be thought of as a combination of the Reader and Maybe monads. Immutability Every predefined pattern as well as patterns returned by the CreatePattern and extension methods are immutable. Calling an extension method on a pattern returns a new pattern – the old one is unchanged. An exception is the pattern returned by the Cached method, which is not immutable – it holds a mutable cache. But if a pattern is referentially transparent (its Match method always returns the same result for the same input and doesn't have any side effects), then the caching pattern based on it can be thought of as immutable as well, because it doesn't matter how many times the base pattern's Match method is called. Creating Custom Patterns This library works with arbitrary patterns. There are several ways to create custom patterns. The Easy Way The Pattern class contains the CreatePattern methods which create patterns from functions. There are two variations: Create a pattern from a predicate. This predicate will be used to test the value. If it returns true, then the input value will be the result. Create a pattern from a matcher function. This is a function which has the same signature as the Match method of the IPattern<TInput, TMatchResult> interface. This function will be used to match inputs. There are also overloads which take a description. The Hard Way If you want something more complex than a single function, you can create a class which extends the Matchmaker.Patterns.Pattern<TInput, TMatchResult> class. This is a base class for patterns, and it implements the Description property which you don't have to use if you don't want – by default the description is empty, which means that the pattern doesn't have a description. You can also implement the IPattern<TInput, TMatchResult> interface directly. There is no reason to do that instead of extending the Pattern<TInput, TMatchResult> class unless your class already extends another class. But in that case, making your class a pattern will most probably break the single responsibility principle."
  },
  "articles/results.html": {
    "href": "articles/results.html",
    "title": "Match Results | Matchmaker",
    "summary": "Match Results This library has to deal with values that sometimes might be present, and sometimes not. This can be represented by the 'optional value' pattern. Unfortunately, C# does not have a native optional type. The 1.x versions of this library used language-ext to include the optional type. There are several reasons why this library was dropped in version 2: language-ext is a full-blown framework for functional programming. Users may not want that much functionality. They may want just pattern matching and nothing else. Users may use a different library/framework for functional features. There are a lot of those for C#. So, starting with version 2, instead of using the OptionUnsafe<T> type from language-ext, this library includes a MatchResult<T> type. This type is much like optional types from other libraries in that it may contain a value, or may not, except for a couple differences: MatchResult<T> is not a general-purpose optional type and shouldn't be used as such. MatchResult<T> can contain null values and this is important to remember. This type is not used to avoid NullReferenceException. Working with Match Results MatchResult<T> is a struct with value-based equality. Values of this type can be created through methods in the MatchResult class: Success and Failure. The simplest way to work with match results is to use the IsSuccessful and Value properties. Value throws an exception if the result doesn't contain a value. If you are using a functional library/framework, you can write an extension method which transforms MatchResult<T> into the library's optional type. But remember that MatchResult<T> can contain null values, and not all optional implementations support that. LINQ to Results The Matchmaker.Linq namespace contains several extension methods to make working with match results easier: GetValueOrDefault lets you safely get the value of the result. GetValueOrThrow lets you get the value of the result or explicitly throw an exception of your choice. Select maps the value of the result if it's present. Bind flat-maps the value of the result if it's present. Where filters the result's value if it's present. Cast casts the result's value to the specified type if it's present and can be cast to that type. Note that null values cannot be cast to a non-nullable value type, and if a successful result which contains a null value is cast to a non-nullable value type, you will get a failed result. Do performs an action on the result's value if it's present and returns the result itself. Since there are the Select and Where extensions on MatchResult<T>, you can write them using C#'s query syntax."
  },
  "articles/unions.html": {
    "href": "articles/unions.html",
    "title": "Discriminated Unions | Matchmaker",
    "summary": "Discriminated Unions While discriminated unions (or sum types) are not directly supported in C# as of June 2025, they can be modelled using class hierarchies. But in order for them be user-friendly, a way to process the values has to be implemented, e.g., in the form of the Visitor pattern. Or, pattern matching can be used instead. Let's define a simple list, implemented as cons cells. This list is not generic for simplicity. public abstract class ConsList { private protected ConsList() { } public static ConsList Cell(int head, ConsList tail) => new ConsCell(head, tail); public static ConsList Empty => new Empty(); } public sealed class ConsCell : ConsList { public int Head { get; } public ConsList Tail { get; } internal ConsCell(int head, ConsList tail) { this.Head = head; this.Tail = tail; } } public sealed class Empty : ConsList { internal Empty() { } } Now let's look what pattern matching on the list would look like. Let's create a function which finds the sum of all items of the list. public int Sum(ConsList list) => Match.Create<ConsList, int>() .Case<ConsCell>(cell => cell.Head + Sum(cell.Tail)) .Case<Empty>(_ => 0) .ExecuteOn(list); Case<TType>(...) is the same as Case(Pattern.Type<TInput, TType>(), ...). Here is the equivalent function implemented using the switch statement (pre-C# 8): public int Sum(ConsList list) { switch (list) { case ConsCell cell: return cell.Head + Sum(cell.Tail); case Empty _: return 0; } throw new MatchException(\"This will never happen, but C# can't know that.\"); } As you can see, we have to throw an exception in the switch version, because C# can't know that ConsCell and Empty are the only possible subclasses of ConsList. And for that reason, if we forget to define one of the cases in switch or in a match, we'll get an exception. In F# a warning is issued when the match is incomplete, but C# doesn't have the notion of complete or incomplete matches. Of course, this match will fail if the provided list is null, but this can be handled using the Null pattern. With C# 8, there's a better way to match on discriminated unions, but we still have to explicitly throw an exception in the default case (which we know won't happen): public int Sum(ConsList list) => list switch { ConsCell cell => cell.Head + Sum(cell.Tail), Empty _ => 0, _ => throw new MatchException(\"This will never happen, but C# can't know that.\"); }; }"
  },
  "articles/why.html": {
    "href": "articles/why.html",
    "title": "Why This Library Was Written | Matchmaker",
    "summary": "Why This Library Was Written Should I Use This Library? Pattern matching as a technique was created to make code which operates on data more succinct, clear, and readable. I have to say, I'm not sure this library achieves this. There's no denying that this library is cumbersome, and some features are kind of convoluted. You can certainly use it if you want to – it's extensively tested. But this is more of an experimental effort – I wanted to see how powerful pattern matching can be in C#. In this article I'll try to explain some reasons behind the features of this library. This is not documentation per se, it's more of a thought piece about this library and a recap of its history. Also, I should note that I haven't checked out any other pattern matching libraries for C#. I'm sure there are a lot of them – I can't be the only one who tried to bring this technique into C#. But I wanted to create something by myself and not get inspired by (read: steal) features from the other libraries as I'm sure there's not actually much space for stretching here. Some pattern matching libraries are probably better than this one and I'm okay with it. Background In the end of 2017, after studying F# and functional programming, I've decided to try to bring some functional features into C#. I've created a small library for C# and named it CSX – C# Extensions. I worked on this library just for the fun of it and never intended for it to be anything serious. I've long since stopped doing anything with it, because I've realized that it required a lot of work. My implementations of functional data structures were quite naive, and I've decided that I don't want to invest time into optimizing them. Moreover, I was discouraged by the fact that there already are great functional libraries out there, like language-ext. One feature from that library grew into something more: pattern matching. I've included it into CSX and tried to create a simple way to implement pattern matching on arbitrary types through interfaces but failed and realized that this can't be done that way. I came up with a different way to do pattern matching on arbitrary types but decided to implement it separately from CSX. This is how the PatternMatching library was born. PatternMatching I released the first version of PatternMatching in October 2018. It contained the bare minimum. Patterns are just objects which implement an interface. A match expression is just an object as well. Internally the data about cases was stored as dynamic because the match expression itself cannot know about the types of patterns' transformations. I thought that was the only way to do that. Well, that or reflection. Boy was I wrong, but more on that later. The only reason I've chosen the DLR instead of reflection was because it's easier to write code this way. I've done little research about the performance comparison between the two approaches. Since the name PatternMatching was already taken on NuGet, I've decided to name the package CSharpStuff.PatternMatching (not my best decision). Almost immediately after releasing version 1.0, I made some changes. Some of them were breaking. I know that breaking changes require a bump of the major version, but I didn't think those changes were big enough to warrant a bump of the major version. Also, a breaking change is only breaking if someone actually uses the code. The one big change in version 1.1 was introduction of matching with fall-through. This is probably the most 'experimental' feature in the library. I understand that matching with fall-through probably makes code more difficult to comprehend, but it was fun to play around with designing this feature. It includes major design deviations from the established way of fall-through that's present in C, C++, and Java. C# doesn't have fall-through at all and I think it's a good thing because the way it's implemented in those languages can lead to subtle errors. I understand why it works this way, but the probability of making an error and letting code fall through to the next case is quite big (I should know, I've done that mistake myself). That is why I've implemented it in a way that lets code fall through to the next successful case, and it should be explicitly enabled in several places. I can't really say whether it's better or worse than how switch works, but for me it makes at least the tiniest bit of sense. After releasing version 1.1 (also in October 2018), I thought that that was it and didn't return to it for a year. But version 1.1 was untested, and I knew that I needed to add tests to make this library usable. After I started adding tests, I realized that it was really unusable. Matching with fall-through didn't work at all. Adding tests proved more difficult that I initially thought, simply because adding hundreds of them is not really fun. I decided to use FsCheck (which is for F# but can be used with C# as well) to write property-based tests. I wanted my tests not just to test the functionality, but also to serve as additional documentation which precisely describes the properties of classes and methods. Version 1.2 is the tested version of 1.1. Nobody should use versions 1.0 and 1.1. During the development of version 1.2 I came up with more ideas for improvement of PatternMatching. I also came up with a better name for the library (PatternMatching is a lame name). Matchmaker I've decided to rename the library to 'Matchmaker'. This makes it a triple pun on the word 'match' (Matchmaker does pattern matching, and its logo is a match). Even though there were a lot of breaking changes between these versions, and the library name is different, I believe this is still the same library, because it stayed the same at its core. After releasing version 1.2, it came to me how to implement type-ignorant matching without the use of neither the DLR nor reflection. And to be honest, at that moment I felt dumb, because I haven't thought about it before, and the solution was obvious. In this version I've also completely uprooted the pattern hierarchy and made working with them much easier. I've also added some primitive caching. I'm not an expert on caching – this can be an extensive topic of research – so I can't say that caching in this library is great – it's okay at best. If you need more extensive or better caching of match expressions, you can create an issue (or better yet, a pull request) on GitHub. I will most definitely respond and will do my best to implement it. I've improved the performance of match expression initializations by making them static. This makes the code even more cumbersome, but as for me, it's worth it. One other thing that I've changed drastically is matching with fall-through. The reasoning behind it was shaky before, and now it must seem even more weird. I've made it lazy, which makes it more powerful in that the user can, for example, limit the number of executed cases, but it became even more cumbersome to use. I've also realized that having different default modes of execution in match expressions and match statements was unintuitive, so now match statements also match strictly by default. A couple days after releasing version 2.0.0 I realized once again that I was being dumb and that the less generic IPattern<TInput> interface was not needed. And when I removed it, the only possible point of type failure was gone. Once again, even though this change is potentially breaking, I didn't bump the major version, because I don't think it would break any actual code. After releasing version 2.1.0, I started working on version 3.0.0 which contains 2 major additions: support for nullable reference types and asynchronous pattern matching. Because of those additions, the .NET Standard version had to be bumped to 2.1 (sorry, .NET Framework). Asynchronous pattern matching will probably not be used often. I wrote it simply because I can, and why not – we have asynchronous enumeration, asynchronous disposal, asynchronous almost everything, so why not asynchronous pattern matching? Five years after releasing version 3.0.0, I've decided to release version 3.1.0 which adds support for .NET Standard 2.0 back and uses Microsoft.Bcl.AsyncInterfaces as the polyfill for asynchronous interfaces. So now the library supports .NET Framework once again. So Why Was This Library Written? Having recapped some history and explained some design decisions, I haven't actually said why I wrote this library. Well, the answer is simple: I wrote this library to write a library. I wanted to know what this process is like. Write code. Build it. Deploy it to NuGet. See people actually download it, even though it's a small number. Write tests. A lot of tests. Test everything. There are more tests than lines of code that are actually tested. Write documentation. Lots of it. There's more documentation than code in this library. Write articles on how to use this library. All of this is a lot of work, and this is an exceedingly small library. But I really wanted it to be extensively tested and documented. I know what it's like when you want to use a library and the only way of doing that is to browse its source code. It's not fun. In the process of writing this library I've gained more appreciation of people that maintain libraries. I realize now just how much work this actually is. What's Next I'm not planning on writing new versions beyond 3.1. To be fair, I thought the same thing after releasing version 1.1 and yet here we are. This time I do believe that this library has enough features (probably more than enough). Maybe one day I'll revisit this decision, but for now (June 2025) this is it; this is as good as it gets."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | Matchmaker",
    "summary": "Introduction Matchmaker is a library which enables more powerful pattern matching than is currently available in the C#'s switch statement/expression. Installation dotnet add package Matchmaker A Simple Example This is what the simplest match expression looks like: using static Matchmaker.Patterns.Pattern; // ... string result = Match.Create<int, string>() .Case(EqualTo(1), _ => \"one\") .Case(EqualTo(2), _ => \"two\") .Case(EqualTo(3), _ => \"three\") .Case(EqualTo(4), _ => \"four\") .Case(Any<int>(), i => i.ToString()) .ExecuteOn(5); EqualTo is a predefined pattern. This is what an equivalent switch statement looks like (pre-C# 8): string result; int i = 5; switch (i) { case 1: result = \"one\"; break; case 2: result = \"two\"; break; case 3: result = \"three\"; break; case 4: result = \"four\"; break; default: result = i.ToString(); break; } While this example doesn't show the full power of pattern matching, there are a few things to note here: The match expression yields a result. We don't have to assign the result explicitly in each case. The input of the match expression is specified after all the cases. This allows us to save the match expression in an object and use it multiple times on different input values. The default case is a pattern, just like any other. It's called Any and is always matched successfully. Like in switch the patterns are tried out sequentially. This means that the Any pattern should always come last. C# 8 included a new way to write switch expressions which yield a value, and further versions extended it quite a bit. This drastically reduced the need for external libraries like this one for pattern matching. However, this library lets the user define arbitrary patterns, which makes this library more powerful than the switch expression. Here's what the equivalent switch expression looks like in C# 8: int i = 5; string result = i switch { 1 => \"one\", 2 => \"two\", 3 => \"three\", 4 => \"four\", _ => i.ToString() }; OK, this is much shorter and cleaner than the previous two examples. But this library shines when the patterns are more complex. While C# allows various kinds of patterns, this library allows anything you can think of. More Info If you want to learn how to use this library, you should read these articles. They provide everything you need to know to use this library. If you need extensive information, go to the API reference. If you need even more info about this library, you can go through the tests. They are property-based and as such, they describe every aspect of the classes and their members. They cover 100% of this library's code (except the MatchException class which is trivial)."
  }
}