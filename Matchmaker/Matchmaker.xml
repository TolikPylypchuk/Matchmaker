<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Matchmaker</name>
    </assembly>
    <members>
        <member name="T:Matchmaker.ConditionalPattern`3">
            <summary>
            Represents a pattern, to which additional conditions may be added.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <typeparam name="TPattern">The type of the pattern.</typeparam>
            <seealso cref="T:Matchmaker.IPattern`2" />
            <seealso cref="T:Matchmaker.Pattern`2" />
            <seealso cref="T:Matchmaker.SimplePattern`1" />
        </member>
        <member name="F:Matchmaker.ConditionalPattern`3.Conditions">
            <summary>
            A list of predicates, which specify the conditions of this pattern.
            </summary>
        </member>
        <member name="M:Matchmaker.ConditionalPattern`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.ConditionalPattern`3" /> class
            without any conditions.
            </summary>
        </member>
        <member name="M:Matchmaker.ConditionalPattern`3.#ctor(System.Collections.Immutable.IImmutableList{System.Func{`1,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.ConditionalPattern`3" /> class
            with the specified conditions.
            </summary>
            <param name="conditions">The conditions of this pattern.</param>
        </member>
        <member name="M:Matchmaker.ConditionalPattern`3.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.ConditionalPattern`3.When(System.Func{`1,System.Boolean})">
            <summary>
            Returns a new pattern, which includes the specified condition.
            </summary>
            <param name="condition">The condition to add.</param>
            <returns>A new pattern, which includes the specified condition.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.ConditionalPattern`3.Matchmaker#IPattern{TInput}#Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Extensions">
            <summary>
            A container class for extension methods.
            </summary>
        </member>
        <member name="M:Matchmaker.Extensions.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forces the enumeration of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and ignores the result.
            </summary>
            <typeparam name="T">The type of the items in the enumerate.</typeparam>
            <param name="items">The enumerable to enumerate.</param>
        </member>
        <member name="T:Matchmaker.IPattern`1">
            <summary>
            Represents a pattern to match with in a match expression. This inteface is for internal use and
            should never be used directly by the users of the library. Instead, users should use
            <see cref="T:Matchmaker.IPattern`2" />
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.IPattern`2" />
            <seealso cref="T:Matchmaker.Pattern`2" />
            <seealso cref="T:Matchmaker.SimplePattern`1" />
            <seealso cref="T:Matchmaker.Pattern" />
        </member>
        <member name="M:Matchmaker.IPattern`1.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.IPattern`2">
            <summary>
            Represents a pattern to match with in a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Pattern`2" />
            <seealso cref="T:Matchmaker.SimplePattern`1" />
            <seealso cref="T:Matchmaker.Pattern" />
        </member>
        <member name="M:Matchmaker.IPattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Match">
            <summary>
            A static class which is used to create match expressions.
            </summary>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match`1" />
        </member>
        <member name="M:Matchmaker.Match.Create``2">
            <summary>
            Creates a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
        </member>
        <member name="M:Matchmaker.Match.Create``2(System.Boolean)">
            <summary>
            Creates a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
        </member>
        <member name="M:Matchmaker.Match.Create``1">
            <summary>
            Creates a match statement.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
        </member>
        <member name="M:Matchmaker.Match.Create``1(System.Boolean)">
            <summary>
            Creates a match statement with the specified default fallthrough behaviour.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
        </member>
        <member name="T:Matchmaker.MatchException">
            <summary>
            Represents an exception which is thrown when a match expression hasn't found a successful pattern.
            </summary>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match`1" />
        </member>
        <member name="M:Matchmaker.MatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="message">The message which describes this exception.</param>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="message">The message which describes this exception.</param>
            <param name="innerException">The exception, which caused this exception.</param>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Matchmaker.MatchResult">
            <summary>
            A static class which is used to create match results.
            </summary>
            <seealso cref="T:Matchmaker.MatchResult`1" />
        </member>
        <member name="M:Matchmaker.MatchResult.Success``1(``0)">
            <summary>
            Creates a successful match result with the specified value.
            </summary>
            <param name="value">The value of the result.</param>
            <returns>A successful match result with the specified value.</returns>
            <seealso cref="M:Matchmaker.MatchResult.Failure``1" />
        </member>
        <member name="M:Matchmaker.MatchResult.Failure``1">
            <summary>
            Creates a failed match result.
            </summary>
            <returns>A failed match result.</returns>
            <seealso cref="M:Matchmaker.MatchResult.Success``1(``0)" />
        </member>
        <member name="T:Matchmaker.MatchResult`1">
            <summary>
            Represents the result of a pattern match.
            </summary>
            <typeparam name="T">The type of the value contained in this class.</typeparam>
            <seealso cref="T:Matchmaker.MatchResult" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchResult`1" /> class.
            </summary>
            <param name="isSuccessful"></param>
            <param name="value"></param>
        </member>
        <member name="P:Matchmaker.MatchResult`1.IsSuccessful">
            <summary>
            Gets the value which indicates whether the match result is successful.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchResult`1.Value">
            <summary>
            Gets the value if the match result is successful.
            If it is not, then gets the defualt value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchResult`1.Failure">
            <summary>
            Gets the instance of a failed match result.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchResult`1.Equals(System.Object)">
            <summary>
            Compares this match result to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>
            <see langword="true" /> if this match result is equal to the other object.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})">
            <summary>
            Compares this match result to another match result.
            </summary>
            <param name="other">The match result to compare to.</param>
            <returns>
            <see langword="true" /> if this match result is equal to the other match result.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.GetHashCode">
            <summary>
            Returns the hash code of this match result.
            </summary>
            <returns>The hash code of this match result.</returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.ToString">
            <summary>
            Returns the string representation of this match result.
            </summary>
            <returns>The string representation of this match result.</returns>
        </member>
        <member name="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})">
            <summary>
            Compares two match results for equality.
            </summary>
            <param name="left">The left match result.</param>
            <param name="right">The right match result.</param>
            <returns>
            <see langword="true" /> if the match results are equal.
            Otherwise, <see langword="false" />
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})">
            <summary>
            Compares two match results for inequality.
            </summary>
            <param name="left">The left match result.</param>
            <param name="right">The right match result.</param>
            <returns>
            <see langword="true" /> if the match results are not equal.
            Otherwise, <see langword="false" />
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="T:Matchmaker.Match`1">
            <summary>
            Represents a match statement - a match expression that doesn't yield a value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.Match`1.cases">
            <summary>
            The list of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.Match`1.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`1.#ctor(System.Collections.Immutable.IImmutableList{Matchmaker.Match{`0}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this statement.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(Matchmaker.IPattern{`0,``0},System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(Matchmaker.IPattern{`0,``0},System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteOn(`0)">
            <summary>
            Executes the match statement on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            <see langword="true" />, if the match was successful.
            Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteStrict(`0)">
            <summary>
            Executes the match statement strictly on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteWithFallthrough(`0)">
            <summary>
            Executes the match statement on the specified input with fallthrough lazily.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            An enumerable of <see langword="null" /> objects which enables the execution to be lazy.
            The number of items in this enumerable equals the number of successful cases.
            </returns>
        </member>
        <member name="M:Matchmaker.Match`1.ToFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
        </member>
        <member name="M:Matchmaker.Match`1.ToStrictFunction">
            <summary>
            Returns an action which, when called, will match the specified value strictly.
            </summary>
            <returns>An action which, when called, will match the specified value strictly.</returns>
        </member>
        <member name="M:Matchmaker.Match`1.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value with fallthrough.
            </summary>
            <returns>A function which, when called, will match the specified value with fallthrough.</returns>
        </member>
        <member name="T:Matchmaker.Match`1.CaseData">
            <summary>
            Represents the data of a single case in a match statement.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`1.CaseData.#ctor(Matchmaker.IPattern{`0},System.Boolean,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="action">The action of the case.</param>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Action">
            <summary>
            Gets the action of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.Match`2">
            <summary>
            Represents a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TOutput">The type of the output value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`1" />
            <seealso cref="T:Matchmaker.Match" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.Match`2.cases">
            <summary>
            The list of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.Match`2.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`2.#ctor(System.Collections.Immutable.IImmutableList{Matchmaker.Match{`0,`1}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this expression.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(Matchmaker.IPattern{`0,``0},System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(Matchmaker.IPattern{`0,``0},System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteOn(`0)">
            <summary>
            Executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>The result of the match expression.</returns>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteNonStrict(`0)">
            <summary>
            Executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The result of the match expression, or a failed result if no pattern was matched successfully.
            </returns>
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteWithFallthrough(`0)">
            <summary>
            Executes the match expression on the specified input with fallthrough and lazily returns the results.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The results of the match expression, empty if no pattern is matched successfully.
            </returns>
            <remarks>
            This method returns a lazy enumerable - it will check only as many patterns,
            as are needed to return one result at a time.
            </remarks>
        </member>
        <member name="M:Matchmaker.Match`2.ToFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
        </member>
        <member name="M:Matchmaker.Match`2.ToNonStrictFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
        </member>
        <member name="M:Matchmaker.Match`2.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
        </member>
        <member name="T:Matchmaker.Match`2.CaseData">
            <summary>
            Represents the data of a single case in a match expression.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`2.CaseData.#ctor(Matchmaker.IPattern{`0},System.Boolean,System.Func{System.Object,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="func">The function of the case.</param>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Function">
            <summary>
            Gets the function of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.Pattern">
            <summary>
            Contains some frequently used patterns.
            </summary>
            <seealso cref="T:Matchmaker.IPattern`2" />
            <seealso cref="T:Matchmaker.Pattern`2" />
            <seealso cref="T:Matchmaker.SimplePattern`1" />
        </member>
        <member name="M:Matchmaker.Pattern.Any``1">
            <summary>
            Returns a pattern which is always matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is always matched successfully.</returns>
            <remarks>
            This pattern should be used as the default case of a match expression, if one is needed.
            </remarks>
        </member>
        <member name="M:Matchmaker.Pattern.Null``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Pattern.ValueNull``1" />
        </member>
        <member name="M:Matchmaker.Pattern.ValueNull``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Pattern.Null``1" />
        </member>
        <member name="M:Matchmaker.Pattern.EqualTo``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Pattern.EqualTo``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.EqualTo``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Pattern.EqualTo``1(``0)" />
        </member>
        <member name="M:Matchmaker.Pattern.LessThan``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.LessOrEqual``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value
            is less than or equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value
            is less than or equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value
            is less than or equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value
            is less than or equal to the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.GreaterThan``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value
            is greater than or equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value
            is greater than or equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})" />
        </member>
        <member name="M:Matchmaker.Pattern.GreaterOrEqual``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value
            is greater than or equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value
            is greater than or equal to the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Pattern.GreaterOrEqual``1(``0)" />
        </member>
        <member name="M:Matchmaker.Pattern.Type``2">
            <summary>
            Returns a pattern which is matched successfully when the input value is of the specified type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TType">The type to check for.</typeparam>
            <returns>
            A pattern which is matched successfully when the input value is of the specified type.
            </returns>
            <remarks>
            This pattern can be used to match discriminated unions which are implemented as class hierarchies.
            </remarks>
        </member>
        <member name="M:Matchmaker.Pattern.Not``2(Matchmaker.IPattern{``0,``1})">
            <summary>
            Returns a pattern which is matched successfully when the specified pattern is not matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to invert.</param>
            <returns>
            A pattern which is matched successfully when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Matchmaker.Pattern`2">
            <summary>
            Represents a general transforming pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.IPattern`2" />
            <seealso cref="T:Matchmaker.ConditionalPattern`3" />
            <seealso cref="T:Matchmaker.SimplePattern`1" />
            <seealso cref="T:Matchmaker.Pattern" />
        </member>
        <member name="F:Matchmaker.Pattern`2.matcher">
            <summary>
            The matcher function.
            </summary>
        </member>
        <member name="M:Matchmaker.Pattern`2.#ctor(System.Func{`0,Matchmaker.MatchResult{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Pattern`2" /> class
            with the specified matcher function.
            </summary>
            <param name="matcher">The matcher function.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matcher" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Pattern`2.#ctor(System.Func{`0,Matchmaker.MatchResult{`1}},System.Collections.Immutable.IImmutableList{System.Func{`1,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Pattern`2" /> class
            with the specified matcher function and additional conditions.
            </summary>
            <param name="matcher">The matcher function.</param>
            <param name="conditions">The additional conditions.</param>
        </member>
        <member name="M:Matchmaker.Pattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result if successful.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.Pattern`2.When(System.Func{`1,System.Boolean})">
            <summary>
            Returns a new pattern which includes the specified condition.
            </summary>
            <param name="condition">The condition to add.</param>
            <returns>A new pattern which includes the specified condition.</returns>
        </member>
        <member name="M:Matchmaker.Pattern`2.op_OnesComplement(Matchmaker.Pattern{`0,`1})">
            <summary>
            Returns a pattern which is matched successfully
            when the specified pattern is not matched successfully.
            </summary>
            <param name="pattern">The pattern to invert.</param>
            <returns>
            A pattern which is matched successfully
            when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Matchmaker.SimplePattern`1">
            <summary>
            Represents a general non-transforming pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.IPattern`2" />
            <seealso cref="T:Matchmaker.ConditionalPattern`3" />
            <seealso cref="T:Matchmaker.Pattern`2" />
            <seealso cref="T:Matchmaker.Pattern" />
        </member>
        <member name="M:Matchmaker.SimplePattern`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.SimplePattern`1" /> class
            with the specified condition.
            </summary>
            <param name="condition">The condition of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.#ctor(System.Collections.Immutable.IImmutableList{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.SimplePattern`1" /> class
            with the specified conditions.
            </summary>
            <param name="conditions">The conditions of this pattern.</param>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns the input value if successful.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.When(System.Func{`0,System.Boolean})">
            <summary>
            Returns a new pattern which includes the specified condition.
            </summary>
            <param name="condition">The condition to add.</param>
            <returns>A new pattern which includes the specified condition.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.And(Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully only if both
            this and other pattern are matched successfully.
            </summary>
            <param name="other">The other pattern.</param>
            <returns>
            A pattern which is matched successfully only if both
            this and other pattern are matched successfully.
            </returns>
            <remarks>This is a short-circuiting operation.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.Or(Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully if
            either this or the other pattern is matched successfully.
            </summary>
            <param name="other">The other pattern.</param>
            <returns>
            A pattern which is matched successfully if
            either this or the other pattern is matched successfully.
            </returns>
            <remarks>This is a short-circuiting operation.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.Xor(Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully if
            matches with this pattern and the other pattern yield different results.
            </summary>
            <param name="other">The other pattern.</param>
            <returns>
            A pattern which is matched successfully if
            matches with this pattern and the other pattern yield different results.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.op_BitwiseAnd(Matchmaker.SimplePattern{`0},Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully only if both
            the first pattern and the second pattern are matched successfully.
            </summary>
            <param name="pattern1">The first pattern.</param>
            <param name="pattern2">The second pattern.</param>
            <returns>
            A pattern which is matched successfully only if both
            the first pattern and the second pattern are matched successfully.
            </returns>
            <remarks>This is a short-circuiting operator.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern1" /> or <paramref name="pattern2" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.op_BitwiseOr(Matchmaker.SimplePattern{`0},Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully if
            either the first or the second pattern is matched successfully.
            </summary>
            <param name="pattern1">The first pattern.</param>
            <param name="pattern2">The second pattern.</param>
            <returns>
            A pattern which is matched successfully if
            either the first or the second pattern is matched successfully.
            </returns>
            <remarks>This is a short-circuiting operator.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern1" /> or <paramref name="pattern2" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.op_ExclusiveOr(Matchmaker.SimplePattern{`0},Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully if
            matches with the first pattern and the second pattern yield different results.
            </summary>
            <param name="pattern1">The first pattern.</param>
            <param name="pattern2">The second pattern.</param>
            <returns>
            A pattern which is matched successfully if
            matches with the first pattern and the second pattern yield different results.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern1" /> or <paramref name="pattern2" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.SimplePattern`1.op_OnesComplement(Matchmaker.SimplePattern{`0})">
            <summary>
            Returns a pattern which is matched successfully
            when the specified pattern is not matched successfully.
            </summary>
            <param name="pattern">The pattern to invert.</param>
            <returns>
            A pattern which is matched successfully
            when the specified pattern is not matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
    </members>
</doc>
