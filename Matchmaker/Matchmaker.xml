<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Matchmaker</name>
    </assembly>
    <members>
        <member name="T:Matchmaker.AsyncMatch">
            <summary>
            A static class which is used to create asynchronous match expressions.
            </summary>
            <seealso cref="T:Matchmaker.AsyncMatch`2" />
            <seealso cref="T:Matchmaker.AsyncMatch`1" />
        </member>
        <member name="M:Matchmaker.AsyncMatch.Create``2">
            <summary>
            Creates an asynchronous match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch.Create``2(System.Boolean)" />
        </member>
        <member name="M:Matchmaker.AsyncMatch.Create``2(System.Boolean)">
            <summary>
            Creates an asynchronous match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch.Create``2" />
        </member>
        <member name="M:Matchmaker.AsyncMatch.Create``1">
            <summary>
            Creates an asynchronous match statement.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch.Create``1(System.Boolean)" />
        </member>
        <member name="M:Matchmaker.AsyncMatch.Create``1(System.Boolean)">
            <summary>
            Creates an asynchronous match statement with the specified default fallthrough behaviour.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch.Create``1" />
        </member>
        <member name="M:Matchmaker.AsyncMatch.CreateStatic``2(System.Action{Matchmaker.AsyncMatchBuilder{``0,``1}},System.String,System.Int32)">
            <summary>
            Creates an asynchronous match expression which is then globally cached.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="buildAction">The action which builds the match expression.</param>
            <param name="sourceFilePath">The path to the source file in which this method is called.</param>
            <param name="sourceLineNumber">The line in the source file where this method is called.</param>
            <returns>The globally cached match expression.</returns>
            <remarks>
            <para>
            The key of the cache is the location of this method's call in the source code.
            This way, a new match expression object will not be allocated every time pattern matching occurs
            in the same place more than once.
            </para>
            <para>
            The pattern caching process is thread-safe.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buildAction" /> or <paramref name="sourceFilePath" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch.CreateStatic``1(System.Action{Matchmaker.AsyncMatchBuilder{``0}},System.String,System.Int32)">
            <summary>
            Creates an asynchronous match statement which is then globally cached.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <param name="buildAction">The action which builds the match statement.</param>
            <param name="sourceFilePath">The path to the source file in which this method is called.</param>
            <param name="sourceLineNumber">The line in the source file where this method is called.</param>
            <returns>The globally cached match expression.</returns>
            <remarks>
            <para>
            The key of the cache is the location of this method's call in the source code.
            This way, a new match statement object will not be allocated every time pattern matching occurs
            in the same place more than once.
            </para>
            <para>
            The pattern caching process is thread-safe.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buildAction" /> or <paramref name="sourceFilePath" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch.ClearCache``2">
            <summary>
            Clears the global cache of static <see cref="T:Matchmaker.AsyncMatch`2" /> instances.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <remarks>
            <para>
            After calling this method all
            <see cref="M:Matchmaker.AsyncMatch.CreateStatic``2(System.Action{Matchmaker.AsyncMatchBuilder{``0,``1}},System.String,System.Int32)" />
            calls will recalculate match expressions for types <typeparamref name="TInput" /> and
            <typeparamref name="TOutput" />.
            </para>
            <para>
            Clearing the cache is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Matchmaker.AsyncMatch.ClearCache``1">
            <summary>
            Clears the global cache of static <see cref="T:Matchmaker.AsyncMatch`1" /> instances.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <remarks>
            <para>
            After calling this method all
            <see cref="M:Matchmaker.AsyncMatch.CreateStatic``1(System.Action{Matchmaker.AsyncMatchBuilder{``0}},System.String,System.Int32)" />
            calls will recalculate match statements for type <typeparamref name="TInput" />.
            </para>
            <para>
            Clearing the cache is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:Matchmaker.AsyncMatchBuilder`1">
            <summary>
            Represents an asynchronous match statement builder.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.AsyncMatch`1" />
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatchBuilder`1" /> class.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatchBuilder`1.Cases">
            <summary>
            Gets the collection of cases that will be matched in this statement.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatchBuilder`1.FallthroughByDefault">
            <summary>
            Gets the default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Fallthrough(System.Boolean)">
            <summary>
            Sets the default fallthrough behavior for the match statement.
            </summary>
            <param name="fallthrough">The default fallthrough behavior.</param>
            <returns>The calling builder.</returns>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Boolean,System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Case``1(System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Case``1(System.Boolean,System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), fallthrough, action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`1.Build">
            <summary>
            Constructs an asynchronous match statement from this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matchmaker.AsyncMatchBuilder`2">
            <summary>
            Represents an asynchronous match expression builder.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TOutput">The type of the output value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.AsyncMatch`2" />
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatchBuilder`2" /> class.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatchBuilder`2.Cases">
            <summary>
            Gets the collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatchBuilder`2.FallthroughByDefault">
            <summary>
            Gets the default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Fallthrough(System.Boolean)">
            <summary>
            Sets the default fallthrough behavior for the match expression.
            </summary>
            <param name="fallthrough">The default fallthrough behavior.</param>
            <returns>The calling builder.</returns>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Boolean,System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Case``1(System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Case``1(System.Boolean,System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), fallthrough, func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatchBuilder`2.Build">
            <summary>
            Constructs an asynchronous match expression from this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matchmaker.AsyncMatch`1">
            <summary>
            Represents an asynchronous match statement - a match expression that doesn't yield a value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.AsyncMatch`2" />
            <seealso cref="T:Matchmaker.AsyncMatch" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.AsyncMatch`1.cases">
            <summary>
            The collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.AsyncMatch`1.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`1" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.#ctor(Matchmaker.AsyncMatchBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`1" /> class.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.#ctor(System.Collections.Generic.IReadOnlyCollection{Matchmaker.AsyncMatch{`0}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this statement.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="P:Matchmaker.AsyncMatch`1.Cache">
            <summary>
            Gets the global cache of static match statements.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.Case``1(System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.Case``1(System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), fallthrough, action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ExecuteAsync(`0)">
            <summary>
            Asynchronously executes the match statement strictly on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunction" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ExecuteNonStrictAsync(`0)">
            <summary>
            Asynchronously executes the match statement non-strictly on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            <see langword="true" />, if the match was successful.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToNonStrictFunction" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ExecuteWithFallthroughAsync(`0)">
            <summary>
            Asynchronously executes the match statement on the specified input with fallthrough lazily.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            An enumerable of <see langword="null" /> objects which enables the execution to be lazy.
            The number of items in this enumerable equals the number of successful cases.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ToFunction">
            <summary>
            Returns an action which, when called, will match the specified value.
            </summary>
            <returns>An action which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToNonStrictFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ToNonStrictFunction">
            <summary>
            Returns a function which, when called, will match the specified value non-strictly.
            </summary>
            <returns>A function which, when called, will match the specified value non-strictly.</returns>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value with fallthrough.
            </summary>
            <returns>A function which, when called, will match the specified value with fallthrough.</returns>
            <seealso cref="M:Matchmaker.AsyncMatch`1.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`1.ToNonStrictFunction" />
        </member>
        <member name="T:Matchmaker.AsyncMatch`1.CaseData">
            <summary>
            Represents the data of a single case in a match statement.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`1.CaseData.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,System.Object},System.Boolean,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`1.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="action">The action of the case.</param>
        </member>
        <member name="P:Matchmaker.AsyncMatch`1.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatch`1.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatch`1.CaseData.Action">
            <summary>
            Gets the action of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.AsyncMatch`2">
            <summary>
            Represents an asynchronous match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TOutput">The type of the output value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.AsyncMatch`1" />
            <seealso cref="T:Matchmaker.AsyncMatch" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.AsyncMatch`2.cases">
            <summary>
            The collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.AsyncMatch`2.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`2" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.#ctor(Matchmaker.AsyncMatchBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`2" /> class.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.#ctor(System.Collections.Generic.IReadOnlyCollection{Matchmaker.AsyncMatch{`0,`1}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`2" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this expression.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="P:Matchmaker.AsyncMatch`2.Cache">
            <summary>
            Gets the global cache of static asynchronous match expressions.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.Case``1(Matchmaker.Patterns.Async.IAsyncPattern{`0,``0},System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.Case``1(System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.Case``1(System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(AsyncPattern.Type&lt;TInput, TType&gt;(), fallthrough, func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ExecuteAsync(`0)">
            <summary>
            Asynchronously executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>The result of the match expression.</returns>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunction" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ExecuteNonStrictAsync(`0)">
            <summary>
            Asynchronously executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The result of the match expression, or a failed result if no pattern was matched successfully.
            </returns>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToNonStrictFunction" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ExecuteWithFallthroughAsync(`0)">
            <summary>
            Asynchronously executes the match expression on the specified input with fallthrough
            and lazily returns the results.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The results of the match expression, empty if no pattern is matched successfully.
            </returns>
            <remarks>
            <para>
            This method returns a lazy enumerable - it will check only as many patterns,
            as are needed to return one result at a time.
            </para>
            <para>
            The enumerable may contain <see langword="null" /> values.
            </para>
            </remarks>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ToFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToNonStrictFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ToNonStrictFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteNonStrictAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <remarks>
            <para>
            This method returns a lazy enumerable - it will check only as many patterns,
            as are needed to return one result at a time.
            </para>
            <para>
            The enumerable may contain <see langword="null" /> values.
            </para>
            </remarks>
            <seealso cref="M:Matchmaker.AsyncMatch`2.ExecuteWithFallthroughAsync(`0)" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToFunction" />
            <seealso cref="M:Matchmaker.AsyncMatch`2.ToNonStrictFunction" />
        </member>
        <member name="T:Matchmaker.AsyncMatch`2.CaseData">
            <summary>
            Represents the data of a single case in an asynchronous match expression.
            </summary>
        </member>
        <member name="M:Matchmaker.AsyncMatch`2.CaseData.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,System.Object},System.Boolean,System.Func{System.Object,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.AsyncMatch`2.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="func">The function of the case.</param>
        </member>
        <member name="P:Matchmaker.AsyncMatch`2.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatch`2.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.AsyncMatch`2.CaseData.Function">
            <summary>
            Gets the function of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.Linq.AsyncPatternExtensions">
            <summary>
            A container class for extension methods for <see cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />.
            </summary>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Select``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,``2})">
            <summary>
            Returns a pattern which maps the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <returns>
            A pattern which maps the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="mapper" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Select``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Select``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,``2},System.String)">
            <summary>
            Returns a pattern which maps the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which maps the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="mapper" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Select``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,``2})" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2})">
            <summary>
            Returns a pattern which pipes the result of one pattern to the other pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstPattern" /> or <paramref name="secondPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2},System.String)">
            <summary>
            Returns a pattern which pipes the result of one pattern to the other pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstPattern" />, <paramref name="secondPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}})">
            <summary>
            Returns a pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be piped.</param>
            <param name="matcher">The pattern whose input is the first pattern's output.</param>
            <returns>
            A pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </returns>
            <remarks>
            This method is functionally equivalent to the following, except it reuses the pattern's description:
            <code>
            pattern.Pipe(Pattern.CreatePattern(matcher))
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="matcher" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}},System.String)">
            <summary>
            Returns a pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be piped.</param>
            <param name="matcher">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.CreatePattern(matcher), description)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="matcher" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{Matchmaker.MatchResult{``2}}})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Pipe``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},Matchmaker.Patterns.Async.IAsyncPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Cast``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})">
            <summary>
            Returns a pattern which casts the result of the specified pattern to another type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be cast.</param>
            <returns>
            A pattern which casts the result of the specified pattern to another type.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.Type&lt;TIntermediateResult, TMatchResult&gt;())
            </code>
            As such, this pattern fails if the input is <see langword="null" /> and <typeparamref name="TMatchResult"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Cast``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Cast``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which casts the result of the specified pattern to another type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be cast.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.Type&lt;TIntermediateResult, TMatchResult&gt;(), description)
            </code>
            As such, this pattern fails if the input is <see langword="null" /> and <typeparamref name="TMatchResult"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Cast``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Bind``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.Async.IAsyncPattern{``0,``2}})">
            <summary>
            Returns a pattern which binds (flat-maps) the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <returns>
            A pattern which binds (flat-maps) the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="binder" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Bind``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.Async.IAsyncPattern{``0,``2}},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Bind``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.Async.IAsyncPattern{``0,``2}},System.String)">
            <summary>
            Returns a pattern which binds (flat-maps) the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which binds (flat-maps) the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="binder" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Bind``3(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.Async.IAsyncPattern{``0,``2}})" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Where``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns a pattern which adds a condition to the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="predicate">The condition to add.</param>
            <returns>
            A pattern which adds a condition to the specified pattern.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Where``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Where``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
            Returns a pattern which adds a condition to the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="predicate">The condition to add.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which adds a condition to the specified pattern.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Where``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}})" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)">
            <summary>
            Returns a pattern which is composed of the two specified patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <returns>
            A pattern which is composed of the two specified patterns.
            </returns>
            <remarks>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns.
            </returns>
            <remarks>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.And)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.And, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Or)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            when either pattern's result is successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            when either pattern's result is successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Or, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Xor)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            when only one pattern's result is successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            when only one pattern's result is successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Xor, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Compose``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.And``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Or``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.AsyncPatternExtensions.Xor``1(Matchmaker.Patterns.Async.IAsyncPattern{``0,``0},Matchmaker.Patterns.Async.IAsyncPattern{``0,``0})" />
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Cached``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})">
            <summary>
            Returns a pattern which matches the same as the specified pattern, but caches its results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose results should be cached.</param>
            <returns>
            A pattern which matches the same as the specified pattern, but caches its results.
            </returns>
            <remarks>
            The returned pattern's caching process is thread-safe.
            The cache itself is a simple null-safe hash table.
            </remarks>
        </member>
        <member name="M:Matchmaker.Linq.AsyncPatternExtensions.Cached``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which matches the same as the specified pattern, but caches its results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose results should be cached.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which matches the same as the specified pattern, but caches its results.
            </returns>
            <remarks>
            The returned pattern's caching process is thread-safe.
            The cache itself is a simple null-safe hash table.
            </remarks>
        </member>
        <member name="T:Matchmaker.Linq.MatchExtensions">
            <summary>
            A general container class for extension methods.
            </summary>
        </member>
        <member name="M:Matchmaker.Linq.MatchExtensions.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forces the enumeration of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and ignores the result.
            </summary>
            <typeparam name="T">The type of the items in the enumerate.</typeparam>
            <param name="items">The enumerable to enumerate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Matchmaker.Linq.MatchResultExtensions">
            <summary>
            A container class for extension methods for <see cref="T:Matchmaker.MatchResult`1" />.
            </summary>
            <seealso cref="T:Matchmaker.MatchResult`1" />
            <seealso cref="T:Matchmaker.MatchResult" />
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(Matchmaker.MatchResult{``0})">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be returned.</param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(Matchmaker.MatchResult{``0},``0)">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be returned.</param>
            <param name="defaultValue">The value to return if the result is not successful.</param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(Matchmaker.MatchResult{``0},System.Func{``0})">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be returned.</param>
            <param name="defaultValueProvider">
            The function which provides the value to return if the result is not successful.
            </param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="defaultValueProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrThrow``1(Matchmaker.MatchResult{``0},System.Func{System.Exception})">
            <summary>
            Returns the result's value if it's successful, or throws the provided exception otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be returned.</param>
            <param name="exceptionProvider">
            The function which provides the exception to throw if the result is not successful.
            </param>
            <returns>The result's value if it's successful.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exceptionProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Select``2(Matchmaker.MatchResult{``0},System.Func{``0,``1})">
            <summary>
            Returns a result which contains a mapped value if the specified result is successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="result">The result whose value should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <returns>
            A result which contains a mapped value if the specified result is successful. Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="mapper" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mapper" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Bind``2(Matchmaker.MatchResult{``0},System.Func{``0,Matchmaker.MatchResult{``1}})">
            <summary>
            Returns a flat-mapped result if the specified result is successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="result">The result whose value should be flat-mapped.</param>
            <param name="binder">The result binding function.</param>
            <returns>
            A flat-mapped result if the specified result is successful. Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="binder" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="binder" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Where``1(Matchmaker.MatchResult{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a successful result only if the specified result is successful
            and its value satisfies a specified predicate.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be checked.</param>
            <param name="predicate">The predicate to use to check the value.</param>
            <returns>
            A successfult result if the specified result is successful and its value satisfies a specified predicate.
            Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="predicate" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Cast``2(Matchmaker.MatchResult{``0})">
            <summary>
            Returns a successful result if the specified result is successful
            and contains a value that can be cast to <typeparamref name="TResult" />.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="result">The result whose value should be cast.</param>
            <returns>
            A successful result if the specified result is successful and contains a value that can be cast to
            <typeparamref name="TResult" />. Otherwise, a failed result.
            </returns>
            <remarks>
            If the result contains <see langword="null" />, then this method returns a failed result only when
            <typeparamref name="TResult" /> is a non-nullable value type.
            </remarks>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Do``1(Matchmaker.MatchResult{``0},System.Action{``0})">
            <summary>
            Performs a specified action on the result's value if it's successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="result">The result whose value should be passed to the action.</param>
            <param name="action">The action to perform.</param>
            <returns>The result for which the action should be executed.</returns>
            <remarks>
            The <paramref name="action" />'s parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}})">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be mapped.</param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
            <remarks>
            The resulting <see cref="T:System.Threading.Tasks.Task`1" /> may contain <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},``0)">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be returned.</param>
            <param name="defaultValue">The value to return if the result is not successful.</param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
            <remarks>
            The resulting <see cref="T:System.Threading.Tasks.Task`1" /> may contain <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0})">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be mapped.</param>
            <param name="defaultValueProvider">
            The function which provides the value to return if the result is not successful.
            </param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
            <remarks>
            The resulting <see cref="T:System.Threading.Tasks.Task`1" /> may contain <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="defaultValueProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrDefault``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns the result's value if it's successful, or the default one otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be mapped.</param>
            <param name="defaultValueProvider">
            The function which provides the value to return if the result is not successful.
            </param>
            <returns>
            The result's value if it's successful, or the default one otherwise.
            </returns>
            <remarks>
            The resulting <see cref="T:System.Threading.Tasks.Task`1" /> may contain <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="defaultValueProvider" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="defaultValueProvider" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.GetValueOrThrow``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{System.Exception})">
            <summary>
            Returns the result's value if it's successful, or throws the provided exception otherwise.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be mapped.</param>
            <param name="exceptionProvider">
            The function which provides the exception to throw if the result is not successful.
            </param>
            <returns>The result's value if it's successful.</returns>
            <remarks>
            The resulting <see cref="T:System.Threading.Tasks.Task`1" /> may contain <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="exceptionProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Select``2(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0,``1})">
            <summary>
            Returns a result which contains a mapped value if the specified result is successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="futureResult">The result whose value should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <returns>
            A result which contains a mapped value if the specified result is successful. Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="mapper" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="mapper" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Bind``2(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}})">
            <summary>
            Returns a flat-mapped result if the specified result is successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="futureResult">The result whose value should be flat-mapped.</param>
            <param name="binder">The result binding function.</param>
            <returns>
            A flat-mapped result if the specified result is successful. Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="binder" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="binder" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="binder" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Where``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Returns a successful result only if the specified result is successful
            and its value satisfies a specified predicate.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be checked.</param>
            <param name="predicate">The predicate to use to check the value.</param>
            <returns>
            A successfult result if the specified result is successful and its value satisfies a specified predicate.
            Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="predicate" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Where``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns a successful result only if the specified result is successful
            and its value satisfies a specified predicate.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be checked.</param>
            <param name="predicate">The predicate to use to check the value.</param>
            <returns>
            A successfult result if the specified result is successful and its value satisfies a specified predicate.
            Otherwise, a failed result.
            </returns>
            <remarks>
            The <paramref name="predicate" /> function's parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="predicate" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Cast``2(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}})">
            <summary>
            Returns a successful result if the specified result is successful
            and contains a value that can be cast to <typeparamref name="TResult" />.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <typeparam name="TResult">The type of the returned result's value.</typeparam>
            <param name="futureResult">The result whose value should be cast.</param>
            <returns>
            A successful result if the specified result is successful and contains a value that can be cast to
            <typeparamref name="TResult" />. Otherwise, a failed result.
            </returns>
            <remarks>
            If the result contains <see langword="null" />, then this method returns a failed result only when
            <typeparamref name="TResult" /> is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Do``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Action{``0})">
            <summary>
            Performs a specified action on the result's value if it's successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be passed to the action.</param>
            <param name="action">The action to perform.</param>
            <returns>The result for which the action should be executed.</returns>
            <remarks>
            The <paramref name="action" />'s parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.Do``1(System.Threading.Tasks.Task{Matchmaker.MatchResult{``0}},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Performs a specified action on the result's value if it's successful.
            </summary>
            <typeparam name="T">The type of the result's value.</typeparam>
            <param name="futureResult">The result whose value should be passed to the action.</param>
            <param name="action">The action to perform.</param>
            <returns>The result for which the action should be executed.</returns>
            <remarks>
            The <paramref name="action" />'s parameter may be <see langword="null" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="futureResult" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="action" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.CallAndThrowIfNull``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
            Calls the specified function, but throws <see cref="T:System.InvalidOperationException" /> if it returnes
            <see langword="null" />.
            </summary>
            <typeparam name="T">The type of the function's input.</typeparam>
            <param name="func">The function to call.</param>
            <param name="input">The function's input value.</param>
            <returns>The specified function's result.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="func" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.CallAndThrowIfNull``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Calls the specified function, but throws <see cref="T:System.InvalidOperationException" /> if it returnes
            <see langword="null" />.
            </summary>
            <typeparam name="TResult">The type of the function's result.</typeparam>
            <param name="func">The function to call.</param>
            <returns>The specified function's result.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="func" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Linq.MatchResultExtensions.CallAndThrowIfNull``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Calls the specified function, but throws <see cref="T:System.InvalidOperationException" /> if it returnes
            <see langword="null" />.
            </summary>
            <typeparam name="T">The type of the function's input.</typeparam>
            <typeparam name="TResult">The type of the function's result.</typeparam>
            <param name="func">The function to call.</param>
            <param name="input">The function's input value.</param>
            <returns>The specified function's result.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="func" /> returned <see langword="null" />.
            </exception>
        </member>
        <member name="T:Matchmaker.Linq.PatternExtensions">
            <summary>
            A container class for extension methods for <see cref="T:Matchmaker.Patterns.IPattern`2" />.
            </summary>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Select``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,``2})">
            <summary>
            Returns a pattern which maps the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <returns>
            A pattern which maps the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="mapper" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Select``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Select``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,``2},System.String)">
            <summary>
            Returns a pattern which maps the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which maps the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="mapper" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Select``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,``2})" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2})">
            <summary>
            Returns a pattern which pipes the result of one pattern to the other pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstPattern" /> or <paramref name="secondPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2},System.String)">
            <summary>
            Returns a pattern which pipes the result of one pattern to the other pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstPattern" />, <paramref name="secondPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}})">
            <summary>
            Returns a pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be piped.</param>
            <param name="matcher">The pattern whose input is the first pattern's output.</param>
            <returns>
            A pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </returns>
            <remarks>
            This method is functionally equivalent to the following, except it reuses the pattern's description:
            <code>
            pattern.Pipe(Pattern.CreatePattern(matcher))
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="matcher" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}},System.String)">
            <summary>
            Returns a pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be piped.</param>
            <param name="matcher">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the pattern
            created by the specified matcher function.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.CreatePattern(matcher), description)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="matcher" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.MatchResult{``2}})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Pipe``3(Matchmaker.Patterns.IPattern{``0,``1},Matchmaker.Patterns.IPattern{``1,``2},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Cast``3(Matchmaker.Patterns.IPattern{``0,``1})">
            <summary>
            Returns a pattern which casts the result of the specified pattern to another type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be cast.</param>
            <returns>
            A pattern which casts the result of the specified pattern to another type.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.Type&lt;TIntermediateResult, TMatchResult&gt;())
            </code>
            As such, this pattern fails if the input is <see langword="null" /> and <typeparamref name="TMatchResult"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Cast``3(Matchmaker.Patterns.IPattern{``0,``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Cast``3(Matchmaker.Patterns.IPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which casts the result of the specified pattern to another type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be cast.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which pipes the result of one pattern to the other pattern when it's successful.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            pattern.Pipe(Pattern.Type&lt;TIntermediateResult, TMatchResult&gt;(), description)
            </code>
            As such, this pattern fails if the input is <see langword="null" /> and <typeparamref name="TMatchResult"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Cast``3(Matchmaker.Patterns.IPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Bind``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.IPattern{``0,``2}})">
            <summary>
            Returns a pattern which binds (flat-maps) the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <returns>
            A pattern which binds (flat-maps) the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="binder" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Bind``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.IPattern{``0,``2}},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Bind``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.IPattern{``0,``2}},System.String)">
            <summary>
            Returns a pattern which binds (flat-maps) the result of the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the specified pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which binds (flat-maps) the result of the specified pattern when it's successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" />, <paramref name="binder" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Bind``3(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,Matchmaker.Patterns.IPattern{``0,``2}})" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Where``2(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Returns a pattern which adds a condition to the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="predicate">The condition to add.</param>
            <returns>
            A pattern which adds a condition to the specified pattern.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Where``2(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,System.Boolean},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Where``2(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,System.Boolean},System.String)">
            <summary>
            Returns a pattern which adds a condition to the specified pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="predicate">The condition to add.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which adds a condition to the specified pattern.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Where``2(Matchmaker.Patterns.IPattern{``0,``1},System.Func{``1,System.Boolean})" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)">
            <summary>
            Returns a pattern which is composed of the two specified patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <returns>
            A pattern which is composed of the two specified patterns.
            </returns>
            <remarks>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns.
            </returns>
            <remarks>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.And)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.And, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Or)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            when either pattern's result is successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            when either pattern's result is successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Or, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            only when both patterns' results are successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Xor)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" /> or <paramref name="rightPattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)">
            <summary>
            Returns a pattern which is composed of the two specified patterns such that the result is successful
            when only one pattern's result is successful.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which is composed of the two specified patterns such that the result is successful
            when only one pattern's result is successful.
            </returns>
            <remarks>
            <para>
            The resulting pattern ignores the patterns' transformations
            and returns the input value if matched successfully.
            </para>
            <para>
            This method is functionally equivalent to the following:
            <code>
            leftPattern.Compose(rightPattern, PatternComposition.Xor, description)
            </code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="leftPattern" />, <paramref name="rightPattern" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Cached``2(Matchmaker.Patterns.IPattern{``0,``1})">
            <summary>
            Returns a pattern which matches the same as the specified pattern, but caches its results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose results should be cached.</param>
            <returns>
            A pattern which matches the same as the specified pattern, but caches its results.
            </returns>
            <remarks>
            The returned pattern's caching process is not thread-safe.
            The cache itself is a simple null-safe hash table.
            </remarks>
        </member>
        <member name="M:Matchmaker.Linq.PatternExtensions.Cached``2(Matchmaker.Patterns.IPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which matches the same as the specified pattern, but caches its results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern whose results should be cached.</param>
            <param name="description">The description of this pattern.</param>
            <returns>
            A pattern which matches the same as the specified pattern, but caches its results.
            </returns>
            <remarks>
            The returned pattern's caching process is not thread-safe.
            The cache itself is a simple null-safe hash table.
            </remarks>
        </member>
        <member name="T:Matchmaker.Match">
            <summary>
            A static class which is used to create match expressions.
            </summary>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match`1" />
        </member>
        <member name="M:Matchmaker.Match.Create``2">
            <summary>
            Creates a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.Match.Create``2(System.Boolean)" />
        </member>
        <member name="M:Matchmaker.Match.Create``2(System.Boolean)">
            <summary>
            Creates a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match expression which specifies the patterns to match with and functions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.Match.Create``2" />
        </member>
        <member name="M:Matchmaker.Match.Create``1">
            <summary>
            Creates a match statement.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.Match.Create``1(System.Boolean)" />
        </member>
        <member name="M:Matchmaker.Match.Create``1(System.Boolean)">
            <summary>
            Creates a match statement with the specified default fallthrough behaviour.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
            <returns>
            A match statement which specifies the patterns to match with and actions which are executed.
            </returns>
            <seealso cref="M:Matchmaker.Match.Create``1" />
        </member>
        <member name="M:Matchmaker.Match.CreateStatic``2(System.Action{Matchmaker.MatchBuilder{``0,``1}},System.String,System.Int32)">
            <summary>
            Creates a match expression which is then globally cached.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="buildAction">The action which builds the match expression.</param>
            <param name="sourceFilePath">The path to the source file in which this method is called.</param>
            <param name="sourceLineNumber">The line in the source file where this method is called.</param>
            <returns>The globally cached match expression.</returns>
            <remarks>
            <para>
            The key of the cache is the location of this method's call in the source code.
            This way, a new match expression object will not be allocated every time pattern matching occurs
            in the same place more than once.
            </para>
            <para>
            The pattern caching process is not thread-safe.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buildAction" /> or <paramref name="sourceFilePath" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match.CreateStatic``1(System.Action{Matchmaker.MatchBuilder{``0}},System.String,System.Int32)">
            <summary>
            Creates a match statement which is then globally cached.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <param name="buildAction">The action which builds the match statement.</param>
            <param name="sourceFilePath">The path to the source file in which this method is called.</param>
            <param name="sourceLineNumber">The line in the source file where this method is called.</param>
            <returns>The globally cached match expression.</returns>
            <remarks>
            <para>
            The key of the cache is the location of this method's call in the source code.
            This way, a new match statement object will not be allocated every time pattern matching occurs
            in the same place more than once.
            </para>
            <para>
            The pattern caching process is not thread-safe.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buildAction" /> or <paramref name="sourceFilePath" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match.ClearCache``2">
            <summary>
            Clears the global cache of static <see cref="T:Matchmaker.Match`2" /> instances.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <remarks>
            <para>
            After calling this method all
            <see cref="M:Matchmaker.Match.CreateStatic``2(System.Action{Matchmaker.MatchBuilder{``0,``1}},System.String,System.Int32)" />
            calls will recalculate match expressions for types <typeparamref name="TInput" /> and
            <typeparamref name="TOutput" />.
            </para>
            <para>
            Clearing the cache is not thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Matchmaker.Match.ClearCache``1">
            <summary>
            Clears the global cache of static <see cref="T:Matchmaker.Match`1" /> instances.
            </summary>
            <typeparam name="TInput">The type of the input value.</typeparam>
            <remarks>
            <para>
            After calling this method all <see cref="M:Matchmaker.Match.CreateStatic``1(System.Action{Matchmaker.MatchBuilder{``0}},System.String,System.Int32)" />
            calls will recalculate match statements for type <typeparamref name="TInput" />.
            </para>
            <para>
            Clearing the cache is not thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:Matchmaker.MatchBuilder`1">
            <summary>
            Represents a match statement builder.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`1" />
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchBuilder`1" /> class.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchBuilder`1.Cases">
            <summary>
            Gets the collection of cases that will be matched in this statement.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchBuilder`1.FallthroughByDefault">
            <summary>
            Gets the default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Fallthrough(System.Boolean)">
            <summary>
            Sets the default fallthrough behavior for the match statement.
            </summary>
            <param name="fallthrough">The default fallthrough behavior.</param>
            <returns>The calling builder.</returns>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Boolean,System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Case``1(System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(Pattern.Type&lt;TInput, TType&gt;(), action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Case``1(System.Boolean,System.Action{``0})">
            <summary>
            Add the specified case to the match statement.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(Pattern.Type&lt;TInput, TType&gt;(), fallthrough, action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`1.Build">
            <summary>
            Constructs a match statement from this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matchmaker.MatchBuilder`2">
            <summary>
            Represents a match expression builder.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TOutput">The type of the output value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`2" />
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchBuilder`2" /> class.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchBuilder`2.Cases">
            <summary>
            Gets the collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchBuilder`2.FallthroughByDefault">
            <summary>
            Gets the default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Fallthrough(System.Boolean)">
            <summary>
            Sets the default fallthrough behavior for the match expression.
            </summary>
            <param name="fallthrough">The default fallthrough behavior.</param>
            <returns>The calling builder.</returns>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Boolean,System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Case``1(System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(Pattern.Type&lt;TInput, TType&gt;(), func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Case``1(System.Boolean,System.Func{``0,`1})">
            <summary>
            Add the specified case to the match expression.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behavior.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>The calling builder.</returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            builder.Case(Pattern.Type&lt;TInput, TType&gt;(), fallthrough, func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.MatchBuilder`2.Build">
            <summary>
            Constructs a match expression from this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matchmaker.MatchException">
            <summary>
            Represents an exception which is thrown when a match expression hasn't found a successful pattern.
            </summary>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match`1" />
        </member>
        <member name="M:Matchmaker.MatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="message">The message which describes this exception.</param>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="message">The message which describes this exception.</param>
            <param name="innerException">The exception, which caused this exception.</param>
        </member>
        <member name="M:Matchmaker.MatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Matchmaker.MatchResult">
            <summary>
            A static class which is used to create match results.
            </summary>
            <seealso cref="T:Matchmaker.MatchResult`1" />
        </member>
        <member name="M:Matchmaker.MatchResult.Success``1(``0)">
            <summary>
            Returns a successful match result with the specified value.
            </summary>
            <param name="value">The value of the result.</param>
            <returns>A successful match result with the specified value.</returns>
            <seealso cref="M:Matchmaker.MatchResult.Failure``1" />
        </member>
        <member name="M:Matchmaker.MatchResult.Failure``1">
            <summary>
            Returns a failed match result.
            </summary>
            <returns>A failed match result.</returns>
            <seealso cref="M:Matchmaker.MatchResult.Success``1(``0)" />
        </member>
        <member name="T:Matchmaker.MatchResult`1">
            <summary>
            Represents the result of a pattern match.
            </summary>
            <typeparam name="T">The type of the value contained in this class.</typeparam>
            <remarks>
            If the result is successful, it contains a value which may be <see langword="null" />. If it is not,
            then it doesn't contain a value.
            </remarks>
            <seealso cref="T:Matchmaker.MatchResult" />
            <seealso cref="T:Matchmaker.Linq.MatchResultExtensions" />
        </member>
        <member name="F:Matchmaker.MatchResult`1.value">
            <summary>
            The value of the result if it's successful.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchResult`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.MatchResult`1" /> class.
            </summary>
            <param name="isSuccessful">The value which indicates whether the match result is successful.</param>
            <param name="value">The value of the result, if it is successful.</param>
        </member>
        <member name="P:Matchmaker.MatchResult`1.IsSuccessful">
            <summary>
            Gets the value which indicates whether the match result is successful.
            </summary>
        </member>
        <member name="P:Matchmaker.MatchResult`1.Value">
            <summary>
            Gets the value if the match result is successful. If it is not, then throws an
            <see cref="T:System.InvalidOperationException" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The result is not successful.
            </exception>
        </member>
        <member name="P:Matchmaker.MatchResult`1.Failure">
            <summary>
            Gets the instance of a failed match result.
            </summary>
        </member>
        <member name="M:Matchmaker.MatchResult`1.Equals(System.Object)">
            <summary>
            Compares this match result to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>
            <see langword="true" /> if this match result is equal to the other object.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})">
            <summary>
            Compares this match result to another match result.
            </summary>
            <param name="other">The match result to compare to.</param>
            <returns>
            <see langword="true" /> if this match result is equal to the other match result.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.GetHashCode">
            <summary>
            Returns the hash code of this match result.
            </summary>
            <returns>The hash code of this match result.</returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.ToString">
            <summary>
            Returns the string representation of this match result.
            </summary>
            <returns>The string representation of this match result.</returns>
        </member>
        <member name="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})">
            <summary>
            Compares two match results for equality.
            </summary>
            <param name="left">The left match result.</param>
            <param name="right">The right match result.</param>
            <returns>
            <see langword="true" /> if the match results are equal. Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="M:Matchmaker.MatchResult`1.op_Inequality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})">
            <summary>
            Compares two match results for inequality.
            </summary>
            <param name="left">The left match result.</param>
            <param name="right">The right match result.</param>
            <returns>
            <see langword="true" /> if the match results are not equal. Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(System.Object)" />
            <seealso cref="M:Matchmaker.MatchResult`1.Equals(Matchmaker.MatchResult{`0})" />
            <seealso cref="M:Matchmaker.MatchResult`1.GetHashCode" />
            <seealso cref="M:Matchmaker.MatchResult`1.op_Equality(Matchmaker.MatchResult{`0},Matchmaker.MatchResult{`0})" />
        </member>
        <member name="T:Matchmaker.Match`1">
            <summary>
            Represents a match statement - a match expression that doesn't yield a value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`2" />
            <seealso cref="T:Matchmaker.Match" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.Match`1.cases">
            <summary>
            The collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.Match`1.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`1.#ctor(Matchmaker.MatchBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Matchmaker.Match`1.#ctor(System.Collections.Generic.IReadOnlyCollection{Matchmaker.Match{`0}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this statement.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="P:Matchmaker.Match`1.Cache">
            <summary>
            Gets the global cache of static match statements.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the specified pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(Pattern.Type&lt;TInput, TType&gt;(), action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.Case``1(System.Boolean,System.Action{``0})">
            <summary>
            Returns a new match statement which includes the pattern for the specified type
            and action to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="action">The action to execute if the match is successful.</param>
            <returns>
            A new match statement which includes the type pattern and action to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(Pattern.Type&lt;TInput, TType&gt;(), fallthrough, action)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteOn(`0)">
            <summary>
            Executes the match statement strictly on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
            <seealso cref="M:Matchmaker.Match`1.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToFunction" />
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteNonStrict(`0)">
            <summary>
            Executes the match statement non-strictly on the specified input.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            <see langword="true" />, if the match was successful.
            Otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:Matchmaker.Match`1.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToNonStrictFunction" />
        </member>
        <member name="M:Matchmaker.Match`1.ExecuteWithFallthrough(`0)">
            <summary>
            Executes the match statement on the specified input with fallthrough lazily.
            </summary>
            <param name="input">The input value of the statement.</param>
            <returns>
            An enumerable of <see langword="null" /> objects which enables the execution to be lazy.
            The number of items in this enumerable equals the number of successful cases.
            </returns>
            <seealso cref="M:Matchmaker.Match`1.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`1.ToFunction">
            <summary>
            Returns an action which, when called, will match the specified value.
            </summary>
            <returns>An action which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.Match`1.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToNonStrictFunction" />
            <seealso cref="M:Matchmaker.Match`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`1.ToNonStrictFunction">
            <summary>
            Returns a function which, when called, will match the specified value non-strictly.
            </summary>
            <returns>A function which, when called, will match the specified value non-strictly.</returns>
            <seealso cref="M:Matchmaker.Match`1.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToFunction" />
            <seealso cref="M:Matchmaker.Match`1.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`1.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value with fallthrough.
            </summary>
            <returns>A function which, when called, will match the specified value with fallthrough.</returns>
            <seealso cref="M:Matchmaker.Match`1.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`1.ToFunction" />
            <seealso cref="M:Matchmaker.Match`1.ToNonStrictFunction" />
        </member>
        <member name="T:Matchmaker.Match`1.CaseData">
            <summary>
            Represents the data of a single case in a match statement.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`1.CaseData.#ctor(Matchmaker.Patterns.IPattern{`0,System.Object},System.Boolean,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`1.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="action">The action of the case.</param>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`1.CaseData.Action">
            <summary>
            Gets the action of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.Match`2">
            <summary>
            Represents a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TOutput">The type of the output value of the expression.</typeparam>
            <seealso cref="T:Matchmaker.Match`1" />
            <seealso cref="T:Matchmaker.Match" />
            <seealso cref="T:Matchmaker.MatchException" />
        </member>
        <member name="F:Matchmaker.Match`2.cases">
            <summary>
            The collection of cases that will be matched in this expression.
            </summary>
        </member>
        <member name="F:Matchmaker.Match`2.fallthroughByDefault">
            <summary>
            The default fallthrough behaviour.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2" /> class.
            </summary>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="M:Matchmaker.Match`2.#ctor(Matchmaker.MatchBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2" /> class.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Matchmaker.Match`2.#ctor(System.Collections.Generic.IReadOnlyCollection{Matchmaker.Match{`0,`1}.CaseData},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2" /> class with the specified cases.
            </summary>
            <param name="cases">The cases of this expression.</param>
            <param name="fallthroughByDefault">The default fallthrough behaviour.</param>
        </member>
        <member name="P:Matchmaker.Match`2.Cache">
            <summary>
            Gets the global cache of static match expressions.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(Matchmaker.Patterns.IPattern{`0,``0},System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </summary>
            <typeparam name="TMatchResult">The type of the result of the pattern's match.</typeparam>
            <param name="pattern">The pattern to match with.</param>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the specified pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(Pattern.Type&lt;TInput, TType&gt;(), func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.Case``1(System.Boolean,System.Func{``0,`1})">
            <summary>
            Returns a new match expression which includes the pattern for the specified type
            and function to execute if this pattern is matched successfully.
            </summary>
            <typeparam name="TType">The type of the result of the pattern's match.</typeparam>
            <param name="fallthrough">The fallthrough behaviour.</param>
            <param name="func">The function to execute if the match is successful.</param>
            <returns>
            A new match expression which includes the type pattern and function to execute if this
            pattern is matched successfully.
            </returns>
            <remarks>
            This method is functionally equivalent to the following:
            <code>
            match.Case(Pattern.Type&lt;TInput, TType&gt;(), fallthrough, func)
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteOn(`0)">
            <summary>
            Executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>The result of the match expression.</returns>
            <exception cref="T:Matchmaker.MatchException">
            The match failed for all cases.
            </exception>
            <seealso cref="M:Matchmaker.Match`2.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToFunction" />
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteNonStrict(`0)">
            <summary>
            Executes the match expression on the specified input and returns the result.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The result of the match expression, or a failed result if no pattern was matched successfully.
            </returns>
            <seealso cref="M:Matchmaker.Match`2.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToNonStrictFunction" />
        </member>
        <member name="M:Matchmaker.Match`2.ExecuteWithFallthrough(`0)">
            <summary>
            Executes the match expression on the specified input with fallthrough and lazily returns the results.
            </summary>
            <param name="input">The input value of the expression.</param>
            <returns>
            The results of the match expression, empty if no pattern is matched successfully.
            </returns>
            <remarks>
            <para>
            This method returns a lazy enumerable - it will check only as many patterns,
            as are needed to return one result at a time.
            </para>
            <para>
            The enumerable may contain <see langword="null" /> values.
            </para>
            </remarks>
            <seealso cref="M:Matchmaker.Match`2.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`2.ToFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.Match`2.ExecuteOn(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToNonStrictFunction" />
            <seealso cref="M:Matchmaker.Match`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`2.ToNonStrictFunction">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <seealso cref="M:Matchmaker.Match`2.ExecuteNonStrict(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToFunction" />
            <seealso cref="M:Matchmaker.Match`2.ToFunctionWithFallthrough" />
        </member>
        <member name="M:Matchmaker.Match`2.ToFunctionWithFallthrough">
            <summary>
            Returns a function which, when called, will match the specified value.
            </summary>
            <returns>A function which, when called, will match the specified value.</returns>
            <remarks>
            <para>
            This method returns a lazy enumerable - it will check only as many patterns,
            as are needed to return one result at a time.
            </para>
            <para>
            The enumerable may contain <see langword="null" /> values.
            </para>
            </remarks>
            <seealso cref="M:Matchmaker.Match`2.ExecuteWithFallthrough(`0)" />
            <seealso cref="M:Matchmaker.Match`2.ToFunction" />
            <seealso cref="M:Matchmaker.Match`2.ToNonStrictFunction" />
        </member>
        <member name="T:Matchmaker.Match`2.CaseData">
            <summary>
            Represents the data of a single case in a match expression.
            </summary>
        </member>
        <member name="M:Matchmaker.Match`2.CaseData.#ctor(Matchmaker.Patterns.IPattern{`0,System.Object},System.Boolean,System.Func{System.Object,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Match`2.CaseData" /> class.
            </summary>
            <param name="pattern">The pattern of the case.</param>
            <param name="fallthrough">The fallthrough behaviour of the case.</param>
            <param name="func">The function of the case.</param>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Pattern">
            <summary>
            Gets the pattern of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Fallthrough">
            <summary>
            Gets the fallthrough behaviour of the case.
            </summary>
        </member>
        <member name="P:Matchmaker.Match`2.CaseData.Function">
            <summary>
            Gets the function of the case.
            </summary>
        </member>
        <member name="T:Matchmaker.Patterns.Async.AsyncPattern">
            <summary>
            Contains factory methods for creating asynchronous patterns.
            </summary>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern`2" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultAnyDescription">
            <summary>
            The default description of the 'any' pattern.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultReturnDescription">
            <summary>
            The default description of the 'return' pattern.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultNullDescription">
            <summary>
            The default description of 'null' patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultEqualToDescription">
            <summary>
            The default description of equality patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultLessThanDescription">
            <summary>
            The default description of less-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultLessOrEqualDescription">
            <summary>
            The default description of less-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultGreaterThanDescription">
            <summary>
            The default description of greater-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultGreaterOrEqualDescription">
            <summary>
            The default description of greater-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultTypeDescriptionFormat">
            <summary>
            The default description of type patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Type``2" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultPipeDescriptionFormat">
            <summary>
            The default description of piping patterns.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultAndDescriptionFormat">
            <summary>
            The default description of the 'and' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultOrDescriptionFormat">
            <summary>
            The default description of the 'or' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultXorDescriptionFormat">
            <summary>
            The default description of the 'xor' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.AsyncPattern.DefaultNotDescriptionFormat">
            <summary>
            The default description of the 'not' pattern combinators.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Not``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}})">
            <summary>
            Creates a pattern which uses a specified function to match its inputs.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <typeparam name="TMatchResult">The type of the pattern's results.</typeparam>
            <param name="matcher">The function which matches the inputs.</param>
            <returns>
            A pattern which matches its inputs according to the specified matcher function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matcher" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}},System.String)">
            <summary>
            Creates a pattern which uses a specified function to match its inputs and has a specified description.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <typeparam name="TMatchResult">The type of the pattern's results.</typeparam>
            <param name="matcher">The function which matches the inputs.</param>
            <param name="description">The pattern's description.</param>
            <returns>
            A pattern which matches its inputs according to the specified matcher function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matcher" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Creates a pattern which uses a specified predicate to match its inputs.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <param name="predicate">The predicate which matches the inputs.</param>
            <returns>
            A pattern which matches its inputs according to the specified predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
            Creates a pattern which uses a specified predicate to match its inputs and has a specified description.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <param name="predicate">The predicate which matches the inputs.</param>
            <param name="description">The pattern's description.</param>
            <returns>
            A pattern which matches its inputs according to the specified predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``2(System.Func{``0,System.Threading.Tasks.Task{Matchmaker.MatchResult{``1}}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.CreatePattern``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1">
            <summary>
            Returns a pattern which is always matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is always matched successfully.</returns>
            <remarks>
            This pattern should be used as the default case of a match expression, if one is needed.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1(System.String)">
            <summary>
            Returns a pattern which is always matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is always matched successfully.</returns>
            <remarks>
            This pattern should be used as the default case of a match expression, if one is needed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1})">
            <summary>
            Returns a pattern which always successfully returns the specified value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="value">The value to return.</param>
            <returns>A pattern which always successfully returns the specified value.</returns>
            <remarks>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1" /> pattern,
            except it returns the specified value instead of the pattern's input.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1},System.String)">
            <summary>
            Returns a pattern which always successfully returns the specified value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="value">The value to return.</param>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which always successfully returns the specified value.</returns>
            <remarks>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1(System.String)" /> pattern,
            except it returns the specified value instead of the pattern's input.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Returns a pattern which always successfully returns the provided value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="valueProvider">The provider of the value to return.</param>
            <returns>A pattern which always successfully returns the provided value.</returns>
            <remarks>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1" /> pattern,
            except it returns the provided value instead of the pattern's input.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider"/> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}},System.String)">
            <summary>
            Returns a pattern which always successfully returns the provided value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="valueProvider">The provider of the value to return.</param>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which always successfully returns the provided value.</returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Pattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Async.AsyncPattern.Any``1(System.String)" /> pattern,
            except it returns the provided value instead of the pattern's input.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Threading.Tasks.Task{``1},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Return``2(System.Func{System.Threading.Tasks.Task{``1}})" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.ValueNull``1" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" />, <paramref name="comparer" /> or <paramref name="description" /> is
            <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.EqualTo``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" />, <paramref name="comparer" /> or <paramref name="description" /> is
            <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" />, <paramref name="comparer" /> or <paramref name="description" /> is
            <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.LessThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" />, <paramref name="comparer" /> or <paramref name="description" /> is
            <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterThan``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" />, <paramref name="comparer" /> or <paramref name="description" /> is
            <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than or equal to
            the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            If <paramref name="valueProvider" /> returns <see langword="null" />, an
            <see cref="T:System.InvalidOperationException" /> will be thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.GreaterOrEqual``1(System.Threading.Tasks.Task{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Type``2">
            <summary>
            Returns a pattern which is matched successfully when the input value is of the specified type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TType">The type to check for.</typeparam>
            <returns>
            A pattern which is matched successfully when the input value is of the specified type.
            </returns>
            <remarks>
            If the input is <see langword="null" />, then this pattern fails only when <typeparamref name="TType"/>
            is a non-nullable value type.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Type``2(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Type``2(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is of the specified type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TType">The type to check for.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is of the specified type.
            </returns>
            <remarks>
            If the input is <see langword="null" />, then this pattern fails only when <typeparamref name="TType"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Type``2" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Not``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})">
            <summary>
            Returns a pattern which is matched successfully when the specified pattern is not matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to invert.</param>
            <returns>
            A pattern which is matched successfully when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Not``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Not``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the specified pattern is not matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to invert.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Async.AsyncPattern.Not``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.MatchAndThrowIfNull``2(Matchmaker.Patterns.Async.IAsyncPattern{``0,``1},``0)">
            <summary>
            Matches the specified pattern and throws an <see cref="T:System.InvalidOperationException" />
            if the returned <see cref="T:System.Threading.Tasks.Task`1" /> is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to match.</param>
            <param name="input">The input value to match against the pattern.</param>
            <returns>The pattern's result.</returns>
            <exception cref="T:System.InvalidOperationException">
            The pattern's match returned <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern.Memoize``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Memoizes the specified function.
            </summary>
            <typeparam name="T">The type of the function's result.</typeparam>
            <param name="function">The function to memoize.</param>
            <returns>The memoized version of the specified function.</returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.AsyncPattern`2">
            <summary>
            Represents a base class for asynchronous patterns.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Pattern`2" /> class.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.AsyncPattern`2" /> class
            with the specified description.
            </summary>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:Matchmaker.Patterns.Async.AsyncPattern`2.Description">
            <summary>
            Gets the description of this pattern.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern`2.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.Async.AsyncPattern`2.ToString">
            <summary>
            Returns the description of this pattern, if it has one.
            </summary>
            <returns>
            The description of this pattern, if it has one.
            If it doesn't, then the name of this pattern's type.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.BindingAsyncPattern`3">
            <summary>
            Represents a pattern which binds (flat-maps) another pattern's result.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the provided pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.BindingAsyncPattern`3.pattern">
            <summary>
            The pattern whose result should be bound.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.BindingAsyncPattern`3.binder">
            <summary>
            The result mapping function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.BindingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,Matchmaker.Patterns.Async.IAsyncPattern{`0,`2}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.BindingAsyncPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.BindingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,Matchmaker.Patterns.Async.IAsyncPattern{`0,`2}},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.BindingAsyncPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.BindingAsyncPattern`3.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.CachingAsyncPattern`2">
            <summary>
            Represents a pattern which caches another pattern's results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.CachingAsyncPattern`2.pattern">
            <summary>
            The pattern whose result should be cached.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CachingAsyncPattern`2.cache">
            <summary>
            The dictionary which holds this pattern's cache.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CachingAsyncPattern`2.nullResult">
            <summary>
            The cached result for the <see langword="null" /> input.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CachingAsyncPattern`2.nullResultLock">
            <summary>
            The object on which to lock the caching process of the <see langword="null" /> input.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CachingAsyncPattern`2.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.CachingAsyncPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be cached.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CachingAsyncPattern`2.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.CachingAsyncPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be cached.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CachingAsyncPattern`2.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.CompositeAsyncPattern`1">
            <summary>
            Represents a pattern which is composed of two other patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.leftPattern">
            <summary>
            The left pattern to compose.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.rightPattern">
            <summary>
            The right pattern to compose.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.composition">
            <summary>
            The composition which should be applied to the patterns.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`0},Matchmaker.Patterns.Async.IAsyncPattern{`0,`0},Matchmaker.Patterns.PatternComposition)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.CompositeAsyncPattern`1" /> class.
            </summary>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`0},Matchmaker.Patterns.Async.IAsyncPattern{`0,`0},Matchmaker.Patterns.PatternComposition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.CompositeAsyncPattern`1" /> class.
            </summary>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the input value,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.ComposeResults(System.Boolean,System.Boolean)">
            <summary>
            Composes the results of the two patterns based on this pattern's composition.
            </summary>
            <param name="left">The result of the left pattern's match.</param>
            <param name="right">The result of the right pattern's match.</param>
            <returns>
            <see langword="true" /> if the composition is successful. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.Async.CompositeAsyncPattern`1.CreateDescription(System.String,System.String,Matchmaker.Patterns.PatternComposition)">
            <summary>
            Creates a description for a composite pattern based on the specified descriptions and operator.
            </summary>
            <param name="leftDescription">The description of the left pattern.</param>
            <param name="rightDescription">The description of the right pattern.</param>
            <param name="composition">The composition operator.</param>
            <returns>A description for a composite pattern</returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2">
            <summary>
            Represents an asynchronous pattern with an additional condition.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2.pattern">
            <summary>
            The pattern to which the condition should be added.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2.condition">
            <summary>
            The condition to add to the pattern.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern to which to add a condition.</param>
            <param name="condition">The condition to add.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,System.Threading.Tasks.Task{System.Boolean}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern to which to add a condition.</param>
            <param name="condition">The condition to add.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.ConditionalAsyncPattern`2.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.IAsyncPattern`2">
            <summary>
            Represents a pattern to match with in an asynchronous match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the match expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="P:Matchmaker.Patterns.Async.IAsyncPattern`2.Description">
            <summary>
            Gets the description of this pattern.
            </summary>
            <remarks>
            Description is not terribly important, but can be used for debugging.
            The description may never be <see langword="null" />. An empty description
            implies that a pattern doesn't have a description.
            </remarks>
        </member>
        <member name="M:Matchmaker.Patterns.Async.IAsyncPattern`2.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
            <remarks>
            Implementations of this this method may throw <see cref="T:System.InvalidOperationException" />
            if they combine instances of <see cref="T:System.Threading.Tasks.Task" /> or <see cref="T:System.Threading.Tasks.Task`1" /> and one
            of those instances is <see langword="null" />.
            </remarks>
        </member>
        <member name="T:Matchmaker.Patterns.Async.MappingAsyncPattern`3">
            <summary>
            Represents a pattern which maps another pattern's result.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the provided pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.MappingAsyncPattern`3.pattern">
            <summary>
            The pattern whose result should be mapped.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.MappingAsyncPattern`3.mapper">
            <summary>
            The result mapping function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.MappingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.MappingAsyncPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.MappingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},System.Func{`1,`2},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.MappingAsyncPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.MappingAsyncPattern`3.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.PipingAsyncPattern`3">
            <summary>
            Represents a pattern which pipes another pattern's result to a different pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the first pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.PipingAsyncPattern`3.firstPattern">
            <summary>
            The pattern whose result should be piped.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Async.PipingAsyncPattern`3.secondPattern">
            <summary>
            The pattern whose input is the first pattern's output.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.PipingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},Matchmaker.Patterns.Async.IAsyncPattern{`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.PipingAsyncPattern`3" /> class.
            </summary>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.PipingAsyncPattern`3.#ctor(Matchmaker.Patterns.Async.IAsyncPattern{`0,`1},Matchmaker.Patterns.Async.IAsyncPattern{`1,`2},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.Async.PipingAsyncPattern`3" /> class.
            </summary>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.PipingAsyncPattern`3.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Async.SimpleAsyncPattern`2">
            <summary>
            Represents a pattern which uses a function to match its inputs asynchronously.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Async.IAsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Async.AsyncPattern" />
        </member>
        <member name="F:Matchmaker.Patterns.Async.SimpleAsyncPattern`2.matcher">
            <summary>
            The matcher function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Async.SimpleAsyncPattern`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{Matchmaker.MatchResult{`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.SimpleAsyncPattern`2" /> class
            with the specified matcher function.
            </summary>
            <param name="matcher">The matcher function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.Async.SimpleAsyncPattern`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{Matchmaker.MatchResult{`1}}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Async.SimpleAsyncPattern`2" /> class
            with the specified matcher function and description.
            </summary>
            <param name="matcher">The matcher function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.Async.SimpleAsyncPattern`2.MatchAsync(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result asynchronously.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.BindingPattern`3">
            <summary>
            Represents a pattern which binds (flat-maps) another pattern's result.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the provided pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.BindingPattern`3.pattern">
            <summary>
            The pattern whose result should be bound.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.BindingPattern`3.binder">
            <summary>
            The result mapping function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.BindingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,Matchmaker.Patterns.IPattern{`0,`2}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.BindingPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.BindingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,Matchmaker.Patterns.IPattern{`0,`2}},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.BindingPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="binder">The result binding function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.BindingPattern`3.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.CachingPattern`2">
            <summary>
            Represents a pattern which caches another pattern's results.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.CachingPattern`2.pattern">
            <summary>
            The pattern whose result should be cached.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.CachingPattern`2.cache">
            <summary>
            The dictionary which holds this pattern's cache.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.CachingPattern`2.nullResult">
            <summary>
            The cached result for the <see langword="null" /> input.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.CachingPattern`2.isNullResultDefined">
            <summary>
            The value which indicates whether the result for the <see langword="null" /> input has been cached.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.CachingPattern`2.#ctor(Matchmaker.Patterns.IPattern{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.CachingPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be cached.</param>
        </member>
        <member name="M:Matchmaker.Patterns.CachingPattern`2.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.CachingPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be cached.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.CachingPattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.CompositePattern`1">
            <summary>
            Represents a pattern which is composed of two other patterns.
            </summary>
            <typeparam name="T">
            The type of the input value of the expression and also the type of the result of this pattern's match.
            </typeparam>
        </member>
        <member name="F:Matchmaker.Patterns.CompositePattern`1.leftPattern">
            <summary>
            The left pattern to compose.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.CompositePattern`1.rightPattern">
            <summary>
            The right pattern to compose.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.CompositePattern`1.composition">
            <summary>
            The composition which should be applied to the patterns.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.CompositePattern`1.#ctor(Matchmaker.Patterns.IPattern{`0,`0},Matchmaker.Patterns.IPattern{`0,`0},Matchmaker.Patterns.PatternComposition)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.CompositePattern`1" /> class.
            </summary>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
        </member>
        <member name="M:Matchmaker.Patterns.CompositePattern`1.#ctor(Matchmaker.Patterns.IPattern{`0,`0},Matchmaker.Patterns.IPattern{`0,`0},Matchmaker.Patterns.PatternComposition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.CompositePattern`1" /> class.
            </summary>
            <param name="leftPattern">The left pattern to compose.</param>
            <param name="rightPattern">The right pattern to compose.</param>
            <param name="composition">The composition which should be applied to the patterns.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.CompositePattern`1.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the input value,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.CompositePattern`1.ComposeResults(System.Boolean,System.Boolean)">
            <summary>
            Composes the results of the two patterns based on this pattern's composition.
            </summary>
            <param name="left">The result of the left pattern's match.</param>
            <param name="right">The result of the right pattern's match.</param>
            <returns>
            <see langword="true" /> if the composition is successful. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.CompositePattern`1.CreateDescription(System.String,System.String,Matchmaker.Patterns.PatternComposition)">
            <summary>
            Creates a description for a composite pattern based on the specified descriptions and operator.
            </summary>
            <param name="leftDescription">The description of the left pattern.</param>
            <param name="rightDescription">The description of the right pattern.</param>
            <param name="composition">The composition operator.</param>
            <returns>A description for a composite pattern</returns>
        </member>
        <member name="T:Matchmaker.Patterns.ConditionalPattern`2">
            <summary>
            Represents a pattern with an additional condition.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.ConditionalPattern`2.pattern">
            <summary>
            The pattern to which the condition should be added.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.ConditionalPattern`2.condition">
            <summary>
            The condition to add to the pattern.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.ConditionalPattern`2.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.ConditionalPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern to which to add a condition.</param>
            <param name="condition">The condition to add.</param>
        </member>
        <member name="M:Matchmaker.Patterns.ConditionalPattern`2.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.ConditionalPattern`2" /> class.
            </summary>
            <param name="pattern">The pattern to which to add a condition.</param>
            <param name="condition">The condition to add.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.ConditionalPattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.IPattern`2">
            <summary>
            Represents a pattern to match with in a match expression.
            </summary>
            <typeparam name="TInput">The type of the input value of the match expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.Pattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
            <seealso cref="T:Matchmaker.Linq.PatternExtensions" />
        </member>
        <member name="P:Matchmaker.Patterns.IPattern`2.Description">
            <summary>
            Gets the description of this pattern.
            </summary>
            <remarks>
            Description is not terribly important, but can be used for debugging.
            The description may never be <see langword="null" />. An empty description
            implies that a pattern doesn't have a description.
            </remarks>
        </member>
        <member name="M:Matchmaker.Patterns.IPattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.MappingPattern`3">
            <summary>
            Represents a pattern which maps another pattern's result.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the provided pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.MappingPattern`3.pattern">
            <summary>
            The pattern whose result should be mapped.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.MappingPattern`3.mapper">
            <summary>
            The result mapping function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.MappingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.MappingPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.MappingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},System.Func{`1,`2},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.MappingPattern`3" /> class.
            </summary>
            <param name="pattern">The pattern whose result should be mapped.</param>
            <param name="mapper">The result mapping function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.MappingPattern`3.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.Pattern">
            <summary>
            Contains factory methods for creating patterns.
            </summary>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern`2" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultAnyDescription">
            <summary>
            The default description of the 'any' pattern.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Any``1" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultReturnDescriptionFormat">
            <summary>
            The default description of the 'return' pattern.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1)" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyReturnDescription">
            <summary>
            The default description of the lazy 'return' pattern.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultNullDescription">
            <summary>
            The default description of 'null' patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultEqualToDescriptionFormat">
            <summary>
            The default description of equality patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyEqualToDescription">
            <summary>
            The default description of lazy equality patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLessThanDescriptionFormat">
            <summary>
            The default description of less-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyLessThanDescription">
            <summary>
            The default description of lazy less-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLessOrEqualDescriptionFormat">
            <summary>
            The default description of less-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyLessOrEqualDescription">
            <summary>
            The default description of lazy less-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultGreaterThanDescriptionFormat">
            <summary>
            The default description of greater-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyGreaterThanDescription">
            <summary>
            The default description of lazy greater-than patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultGreaterOrEqualDescriptionFormat">
            <summary>
            The default description of greater-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultLazyGreaterOrEqualDescription">
            <summary>
            The default description of lazy greater-or-equal patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultTypeDescriptionFormat">
            <summary>
            The default description of type patterns.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Type``2" />
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultPipeDescriptionFormat">
            <summary>
            The default description of piping patterns.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultAndDescriptionFormat">
            <summary>
            The default description of the 'and' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultOrDescriptionFormat">
            <summary>
            The default description of the 'or' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultXorDescriptionFormat">
            <summary>
            The default description of the 'xor' pattern combinator.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.Pattern.DefaultNotDescriptionFormat">
            <summary>
            The default description of the 'not' pattern combinators.
            </summary>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Not``2(Matchmaker.Patterns.IPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}})">
            <summary>
            Creates a pattern which uses a specified function to match its inputs.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <typeparam name="TMatchResult">The type of the pattern's results.</typeparam>
            <param name="matcher">The function which matches the inputs.</param>
            <returns>
            A pattern which matches its inputs according to the specified matcher function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matcher" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}},System.String)">
            <summary>
            Creates a pattern which uses a specified function to match its inputs and has a specified description.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <typeparam name="TMatchResult">The type of the pattern's results.</typeparam>
            <param name="matcher">The function which matches the inputs.</param>
            <param name="description">The pattern's description.</param>
            <returns>
            A pattern which matches its inputs according to the specified matcher function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matcher" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean})">
            <summary>
            Creates a pattern which uses a specified predicate to match its inputs.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <param name="predicate">The predicate which matches the inputs.</param>
            <returns>
            A pattern which matches its inputs according to the specified predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Creates a pattern which uses a specified predicate to match its inputs and has a specified description.
            </summary>
            <typeparam name="TInput">The type of the pattern's inputs.</typeparam>
            <param name="predicate">The predicate which matches the inputs.</param>
            <param name="description">The pattern's description.</param>
            <returns>
            A pattern which matches its inputs according to the specified predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``2(System.Func{``0,Matchmaker.MatchResult{``1}},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.CreatePattern``1(System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Any``1">
            <summary>
            Returns a pattern which is always matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is always matched successfully.</returns>
            <remarks>
            This pattern should be used as the default case of a match expression, if one is needed.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Any``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Any``1(System.String)">
            <summary>
            Returns a pattern which is always matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is always matched successfully.</returns>
            <remarks>
            This pattern should be used as the default case of a match expression, if one is needed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Any``1" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Return``2(``1)">
            <summary>
            Returns a pattern which always successfully returns the specified value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="value">The value to return.</param>
            <returns>A pattern which always successfully returns the specified value.</returns>
            <remarks>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Pattern.Any``1" /> pattern,
            except it returns the specified value instead of the pattern's input.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Return``2(``1,System.String)">
            <summary>
            Returns a pattern which always successfully returns the specified value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="value">The value to return.</param>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which always successfully returns the specified value.</returns>
            <remarks>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Pattern.Any``1(System.String)" /> pattern,
            except it returns the specified value instead of the pattern's input.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1})">
            <summary>
            Returns a pattern which always successfully returns the provided value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="valueProvider">The provider of the value to return.</param>
            <returns>A pattern which always successfully returns the provided value.</returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Pattern.Any``1(System.String)" /> pattern,
            except it returns the provided value instead of the pattern's input.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider"/> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1},System.String)">
            <summary>
            Returns a pattern which always successfully returns the provided value, discarding its input value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="valueProvider">The provider of the value to return.</param>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which always successfully returns the provided value.</returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            <para>
            This pattern is much like the <see cref="M:Matchmaker.Patterns.Pattern.Any``1(System.String)" /> pattern,
            except it returns the provided value instead of the pattern's input.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(``1,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Return``2(System.Func{``1})" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Null``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Null``1(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.ValueNull``1">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.ValueNull``1(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is <see langword="null" />.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>A pattern which is matched successfully when the input value is <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.Null``1(System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.ValueNull``1" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the specified value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is equal to the provided value
            according to the specified equality comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to check for equality.</param>
            <param name="comparer">The equality comparer to use for checking equality.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.EqualTo``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal to
            the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal to
            the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is less than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is less than or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.LessOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the specified value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than the provided value
            according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterThan``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the specified value.
            </returns>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal to
            the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal to
            the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the specified value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="value">The value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the specified value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is greater than or equal
            to the provided value according to the specified comparer.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <param name="valueProvider">The provider of the value to compare with.</param>
            <param name="comparer">The comparer to use for comparison.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is greater than
            or equal to the provided value.
            </returns>
            <remarks>
            <para>
            The <paramref name="valueProvider" /> is not called until this pattern's
            <see cref="M:Matchmaker.Patterns.IPattern`2.Match(`0)" /> method is called.
            </para>
            <para>
            The <paramref name="valueProvider" /> will be memoized, so it will be called once,
            and then its result will be cached. The caching process is not thread-safe,
            so there is a chance that the <paramref name="valueProvider" /> can be called
            more than once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueProvider" />, <paramref name="comparer" /> or <paramref name="description" />
            is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.Collections.Generic.IComparer{``0})" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(System.Func{``0},System.String)" />
            <seealso cref="M:Matchmaker.Patterns.Pattern.GreaterOrEqual``1(``0,System.Collections.Generic.IComparer{``0},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Type``2">
            <summary>
            Returns a pattern which is matched successfully when the input value is of the specified type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TType">The type to check for.</typeparam>
            <returns>
            A pattern which is matched successfully when the input value is of the specified type.
            </returns>
            <remarks>
            If the input is <see langword="null" />, then this pattern fails only when <typeparamref name="TType"/>
            is a non-nullable value type.
            </remarks>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Type``2(System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Type``2(System.String)">
            <summary>
            Returns a pattern which is matched successfully when the input value is of the specified type.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TType">The type to check for.</typeparam>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the input value is of the specified type.
            </returns>
            <remarks>
            If the input is <see langword="null" />, then this pattern fails only when <typeparamref name="TType"/>
            is a non-nullable value type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Type``2" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Not``2(Matchmaker.Patterns.IPattern{``0,``1})">
            <summary>
            Returns a pattern which is matched successfully when the specified pattern is not matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to invert.</param>
            <returns>
            A pattern which is matched successfully when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Not``2(Matchmaker.Patterns.IPattern{``0,``1},System.String)" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Not``2(Matchmaker.Patterns.IPattern{``0,``1},System.String)">
            <summary>
            Returns a pattern which is matched successfully when the specified pattern is not matched successfully.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <param name="pattern">The pattern to invert.</param>
            <param name="description">The description of the pattern.</param>
            <returns>
            A pattern which is matched successfully when the specified pattern is not matched successfully.
            </returns>
            <remarks>
            This pattern ignores the specified pattern's transformation
            and returns the input value if matched successfully.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern" /> or <paramref name="description" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Matchmaker.Patterns.Pattern.Not``2(Matchmaker.Patterns.IPattern{``0,``1})" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern.Memoize``1(System.Func{``0})">
            <summary>
            Memoizes the specified function.
            </summary>
            <typeparam name="T">The type of the function's result.</typeparam>
            <param name="function">The function to memoize.</param>
            <returns>The memoized version of the specified function.</returns>
        </member>
        <member name="T:Matchmaker.Patterns.PatternComposition">
            <summary>
            Represnts types of pattern composition.
            </summary>
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Compose``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.PatternComposition,System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.And``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Or``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0})" />
            <seealso cref="M:Matchmaker.Linq.PatternExtensions.Xor``1(Matchmaker.Patterns.IPattern{``0,``0},Matchmaker.Patterns.IPattern{``0,``0},System.String)" />
        </member>
        <member name="F:Matchmaker.Patterns.PatternComposition.And">
            <summary>
            Represents the 'and' composition - the result is successful only when both results are successful.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.PatternComposition.Or">
            <summary>
            Represents the 'or' composition - the result is successful when either of the results is successful.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.PatternComposition.Xor">
            <summary>
            Represents the 'xor' composition - the result is successful when only one of the results is successful.
            </summary>
        </member>
        <member name="T:Matchmaker.Patterns.Pattern`2">
            <summary>
            Represents a base class for patterns.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="M:Matchmaker.Patterns.Pattern`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Pattern`2" /> class.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Pattern`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.Pattern`2" /> class
            with the specified description.
            </summary>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:Matchmaker.Patterns.Pattern`2.Description">
            <summary>
            Gets the description of this pattern.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.Pattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="M:Matchmaker.Patterns.Pattern`2.ToString">
            <summary>
            Returns the description of this pattern, if it has one.
            </summary>
            <returns>
            The description of this pattern, if it has one.
            If it doesn't, then the name of this pattern's type.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.PipingPattern`3">
            <summary>
            Represents a pattern which pipes another pattern's result to a different pattern.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TIntermediateResult">The type of the result of the first pattern's match.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.PipingPattern`3.firstPattern">
            <summary>
            The pattern whose result should be piped.
            </summary>
        </member>
        <member name="F:Matchmaker.Patterns.PipingPattern`3.secondPattern">
            <summary>
            The pattern whose input is the first pattern's output.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.PipingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},Matchmaker.Patterns.IPattern{`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.PipingPattern`3" /> class.
            </summary>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
        </member>
        <member name="M:Matchmaker.Patterns.PipingPattern`3.#ctor(Matchmaker.Patterns.IPattern{`0,`1},Matchmaker.Patterns.IPattern{`1,`2},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Matchmaker.Patterns.PipingPattern`3" /> class.
            </summary>
            <param name="firstPattern">The pattern whose result should be piped.</param>
            <param name="secondPattern">The pattern whose input is the first pattern's output.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.PipingPattern`3.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
        <member name="T:Matchmaker.Patterns.SimplePattern`2">
            <summary>
            Represents a pattern which uses a function to match its inputs.
            </summary>
            <typeparam name="TInput">The type of the input value of the expression.</typeparam>
            <typeparam name="TMatchResult">The type of the result of this pattern's match.</typeparam>
            <seealso cref="T:Matchmaker.Patterns.IPattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern`2" />
            <seealso cref="T:Matchmaker.Patterns.Pattern" />
        </member>
        <member name="F:Matchmaker.Patterns.SimplePattern`2.matcher">
            <summary>
            The matcher function.
            </summary>
        </member>
        <member name="M:Matchmaker.Patterns.SimplePattern`2.#ctor(System.Func{`0,Matchmaker.MatchResult{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.SimplePattern`2" /> class
            with the specified matcher function.
            </summary>
            <param name="matcher">The matcher function.</param>
        </member>
        <member name="M:Matchmaker.Patterns.SimplePattern`2.#ctor(System.Func{`0,Matchmaker.MatchResult{`1}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matchmaker.Patterns.SimplePattern`2" /> class
            with the specified matcher function and description.
            </summary>
            <param name="matcher">The matcher function.</param>
            <param name="description">The description of this pattern.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="description" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Matchmaker.Patterns.SimplePattern`2.Match(`0)">
            <summary>
            Matches the input with this pattern, and returns a transformed result if successful.
            </summary>
            <param name="input">The input value to match.</param>
            <returns>
            A successful match result which contains the transformed result of the match,
            if this match is successful. Otherwise, a failed match result.
            </returns>
        </member>
    </members>
</doc>
